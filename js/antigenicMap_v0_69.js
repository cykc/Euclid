/**
 * @author Charles
 */


/*
 * Change Log
 * 
 * 
 * v0.68 - cluster's group size is used to scale the size of the virus
 * 
 *
 * v0.67 - labels are colored consistently with FigTree's fixed coloring scheme
 * 
 * future:
 *   option to read only the first few lines
 * 
 * need to fix:
 *   - text too large after zooming in  [now have option to select text size]
 *   - when trying to move the text labe by scrolling, the panning also occurs.. need a way to disable panning [now have option to disable panning]
 *  
 *   - scroll on picture also does the zoom in and out..   it doesn't go through the zoomLevel routine that sync up with the zoom in and out button states.
 * 
 * v0.66 - add a routine to connect clusters... and label mutation
 * 
 * v0.65 - load in cluster assignments for Gabriela's model
 *	- fixed a bug that prevented loading virus location when Rotate is off.. the bug was that when rotate is unchecked, a part of the code that would be run
 * 	  inside isRotate would not be run, such that the   currentSample = numSamples - 1;  was not assigned if rotate is unchecked
 * 			-moved the line  currentSample = numSamples - 1 such that it is not inside the if condition 
 * 
 * v0.63
 *  zoom in/out
 *  add a check box option to enable and disable zoom in/out/ and panning, mainly so that if I have labeld some points and want to move them around, panning would interfere with this activity, so I want to have an option to disable panning
 *  add option to change label size
 *  label virus by color (red) if the virus is not annotated
 *  bug fix - in add_cluster_color, it adds color from i=0 to numSamples.. it should be numViruses.
 * 
 * 
 * 
 * v0.62 vs. v0.61
 *  add the sera potency
 *  add the maximum posterior
 *  add an experimental feature in neighborhood 
 * 
 * v0.61 vs. v0.60  : integrate the sera..
 *   To do:
 * 		- load data - that omit lines starting with # and omit blank lines
 *		- reference for Procrustes: use last, not the first 
 * 		- make the angle and flip or not flip public so sera can also apply the same transform
 * 		- Procrustes apply also to sera.. but using procrustes on viruses
 * 		- sera name correction
 * 		- sera hover to front
 * 
 * 		- others: clustering to sera
 */		


//myData = "state	A/Arizona/14/19781	A/Arizona/14/19782	A/Brazil/11/19781	A/Brazil/11/19782	A/Lackland/3/19781	A/Lackland/3/19782	A/USSR/90/19771	A/USSR/90/19772	A/California/45/19781	A/California/45/19782	A/Lackland/7/19781	A/Lackland/7/19782	A/Bayern/7/19951	A/Bayern/7/19952	A/Beijing/262/19951	A/Beijing/262/19952	A/Chile/1/19831	A/Chile/1/19832	A/Denmark/56/20031	A/Denmark/56/20032	A/Egypt/96/20021	A/Egypt/96/20022	A/England/2/20021	A/England/2/20022	A/HongKong/1252/20001	A/HongKong/1252/20002	A/Johannesburg/5/20021	A/Johannesburg/5/20022	A/Johannesburg/82/19961	A/Johannesburg/82/19962	A/Latvia/686/20021	A/Latvia/686/20022	A/Madagascar/57794/20001	A/Madagascar/57794/20002	A/NewCaledonia/20/19991	A/NewCaledonia/20/19992	A/Peru/1621/19991	A/Peru/1621/19992	A/Peru/1798/19991	A/Peru/1798/19992	A/RheinlandPfalz/34/20031	A/RheinlandPfalz/34/20032	A/Singapore/6/19861	A/Singapore/6/19862	A/Stockholm/13/20021	A/Stockholm/13/20022	A/StPetersburg/49/20031	A/StPetersburg/49/20032	A/Switzerland/3100/20021	A/Switzerland/3100/20022	A/Taiwan/1/19861	A/Taiwan/1/19862	A/Texas/36/19911	A/Texas/36/19912	A/Bangkok/1544/20041	A/Bangkok/1544/20042	A/Dakar/88/20031	A/Dakar/88/20032	A/Denmark/22/20051	A/Denmark/22/20052	A/Denmark/3/20051	A/Denmark/3/20052	A/Denmark/86/20031	A/Denmark/86/20032	A/Egypt/136/20051	A/Egypt/136/20052	A/Florida/4/20041	A/Florida/4/20042	A/HongKong/35/20061	A/HongKong/35/20062	A/HongKong/4580/20041	A/HongKong/4580/20042	A/HongKong/4596/20041	A/HongKong/4596/20042	A/HongKong/4922/20051	A/HongKong/4922/20052	A/HongKong/948/20061	A/HongKong/948/20062	A/Hungary/2/20031	A/Hungary/2/20032	A/Iceland/123/20031	A/Iceland/123/20032	A/Johannesburg/28/20051	A/Johannesburg/28/20052	A/Johannesburg/452/20051	A/Johannesburg/452/20052	A/Morocco/275/20041	A/Morocco/275/20042	A/Netherlands/128/20041	A/Netherlands/128/20042	A/Poitiers/2168/20031	A/Poitiers/2168/20032	A/Reunion/1409/20031	A/Reunion/1409/20032	A/Shenzhen/227/19951	A/Shenzhen/227/19952	A/Thessaloniki/24/20051	A/Thessaloniki/24/20052	A/England/333/19801	A/England/333/19802	A/India/6263/19801	A/India/6263/19802	A/Annecy/2013/20091	A/Annecy/2013/20092	A/Berlin/59/20081	A/Berlin/59/20082	A/Brisbane/59/20071	A/Brisbane/59/20072	A/Egypt/10/20071	A/Egypt/10/20072	A/Finland/4/20071	A/Finland/4/20072	A/Fukushima/141/20061	A/Fukushima/141/20062	A/Ghana/2/20081	A/Ghana/2/20082	A/Ghana/9/20081	A/Ghana/9/20082	A/Ghana/152/20081	A/Ghana/152/20082	A/Ghana/163/20081	A/Ghana/163/20082	A/Ghana/FS-09-718/20091	A/Ghana/FS-09-718/20092	A/Ghana/FS-09-791/20091	A/Ghana/FS-09-791/20092	A/Gyeonggibuk/4500/20081	A/Gyeonggibuk/4500/20082	A/HongKong/18106/20091	A/HongKong/18106/20092	A/HongKong/1856/20081	A/HongKong/1856/20082	A/HongKong/1870/20081	A/HongKong/1870/20082	A/HongKong/1988/20091	A/HongKong/1988/20092	A/HongKong/2652/20061	A/HongKong/2652/20062	A/HongKong/3176/20081	A/HongKong/3176/20082	A/HongKong/33597/20091	A/HongKong/33597/20092	A/HongKong/34079/20091	A/HongKong/34079/20092	A/Iceland/8064/20091	A/Iceland/8064/20092	A/Iceland/8599/20091	A/Iceland/8599/20092	A/Incheon/4532/20081	A/Incheon/4532/20082	A/Madagascar/2121/20071	A/Madagascar/2121/20072	A/Madagascar/6054/20091	A/Madagascar/6054/20092	A/Madagascar/6081/20091	A/Madagascar/6081/20092	A/Marrakech/510/20091	A/Marrakech/510/20092	A/Marseille/1148/20091	A/Marseille/1148/20092	A/Mauritius/403/20081	A/Mauritius/403/20082	A/Menya/1386/20091	A/Menya/1386/20092	A/Minsk/179/20081	A/Minsk/179/20082	A/Montpellier/2051/20091	A/Montpellier/2051/20092	A/Moscow/2/20091	A/Moscow/2/20092	A/Netherlands/345/20071	A/Netherlands/345/20072	A/Paraguay/61/20091	A/Paraguay/61/20092	A/Paris/577/20071	A/Paris/577/20072	A/Paris/781/20081	A/Paris/781/20082	A/Perth/200/20081	A/Perth/200/20082	A/Rabat/109/20091	A/Rabat/109/20092	A/Seychelles/2239/20081	A/Seychelles/2239/20082	A/Singapore/10/20091	A/Singapore/10/20092	A/SolomonIslands/3/20061	A/SolomonIslands/3/20062	A/SouthDakota/6/20071	A/SouthDakota/6/20072	A/StPetersburg/12/20081	A/StPetersburg/12/20082	A/StPetersburg/5/20081	A/StPetersburg/5/20082	A/Wisconsin/13/20091	A/Wisconsin/13/20092	A/Zagreb/1982/20081	A/Zagreb/1982/20082	A/Siena/10/19891	A/Siena/10/19892	A/Siena/9/19891	A/Siena/9/19892	A/HongKong/2387/20071	A/HongKong/2387/20072	A/HongKong/2613/20071	A/HongKong/2613/20072	A/Incheon/2647/20071	A/Incheon/2647/20072	A/Johannesburg/141/20071	A/Johannesburg/141/20072	A/Johannesburg/67/20071	A/Johannesburg/67/20072	A/Mauritius/543/20071	A/Mauritius/543/20072	A/Pennsylvania/1/20071	A/Pennsylvania/1/20072	A/Peru/1169/20071	A/Peru/1169/20072	A/StPetersburg/10/20071	A/StPetersburg/10/20072	A/Texas/5/20071	A/Texas/5/20072	A/Tula/5/20071	A/Tula/5/20072	A/Ulaanbaatar/116/20071	A/Ulaanbaatar/116/20072	A/Ulaanbaatar/2212/20071	A/Ulaanbaatar/2212/20072	A/USSR/92/19771	A/USSR/92/19772\n0	0.20985397446579257	-0.4194584439507029	0.8365351454947845	0.6289246036859153	-0.3338671291899512	0.5566846369636896	0.5111253928518653	0.17550945213452837	-0.8302692019534175	0.8209545397032412	-0.7150135178763288	0.5258664399604418	8.03128115741373	0.7966503266848899	9.858504103371168	-0.5639530783914416	1.606475529443473	-0.3846357304913898	13.705041983145588	0.42384471560662107	10.808241715301673	-0.48474333619220716	10.16551290192588	-0.5102658178137811	13.81617511901196	-0.6635805626173024	12.657666880183733	-1.421078469208814	9.062967351495558	0.9611104652247997	12.920581368426294	1.6815266398153315	10.456359707605545	-1.6187931170958358	11.82608956989515	0.7447545421450804	11.50436553575971	-0.8074862743513435	12.543964262742858	-0.9288727692852552	10.853509196891157	-0.7906221468569369	4.26550749321033	0.231604470518288	12.884881386107633	1.929277720865936	12.024146741796027	-0.1786772246467733	12.777242905041948	0.7577040909056576	4.316472377437578	0.19095892370638823	8.756179017934818	-0.14639855343262237	12.038503169663716	0.15025335836583073	12.759807601327601	-1.8143024910547667	15.38996866170679	1.5216447337802528	14.11649101225127	-0.349802563845736	13.945520317579536	0.8703654985440075	14.731816353154976	-0.45991670267486046	13.421843237279104	-0.20051005638354594	12.976308234631293	0.39424875110076896	12.372781385906132	-0.387304334517625	14.247493413628257	-0.6138625553099736	12.78010644391424	0.5520880902300622	15.215735970893023	0.3909060694950389	13.1049786482064	1.2043445409856404	12.420228228706613	-0.05533107890935008	11.839906451795375	1.9818940569803025	14.077213315386137	-0.6572185243652175	13.475291002448703	-0.5415007457342638	14.189211728573381	0.3486760988429536	12.888174824971546	-0.3909420477231099	14.812086442877453	-0.3122001909431748	8.827085594585942	0.08993907419862039	13.287053863340631	-1.4456293200705488	2.356556501705303	-0.923912196825	2.472200680898633	-1.008956762858283	18.168792731906688	0.14220540278843	16.18206569150516	1.068547103082094	12.435576182021869	-0.4392724045247529	14.866783169287613	-1.8563368527051067	14.514203529289725	-0.5052076738418346	13.765316858822793	-0.7525074432416381	14.27780029033729	1.2022338113904325	15.711615394607621	-0.3170166272310832	17.135896572516973	-0.9536935899147893	16.65898445614181	-0.4003162729350381	14.325540178885115	-1.1259847732148982	17.245046241366534	-1.8094857263955884	14.037633093515595	0.40149953130951405	15.130960512840282	0.4750735557866598	16.34869851113796	-1.9478414763396348	14.725673127777386	0.4485270205054439	16.498746424906532	1.5139916018599517	13.702150471674637	-0.16750738597005443	16.318832233759412	0.6137095991306523	16.659858102657914	1.8030548126787282	15.982737749115959	2.2931040968737872	16.5452098155108	0.08406947254180766	16.39900574699157	-0.346245084251679	14.952755663142693	0.23433438666329837	15.951096311153027	1.2479471389067598	16.087988259462715	-0.34394914265453497	15.55146040682981	0.16908946875272038	17.407495791136416	0.09618018586136808	15.820269228934416	-1.7810210088480858	16.662793011944053	0.06487538793265323	15.706440469890618	0.5035546907856127	16.615056315441127	-1.019795786389774	17.246329599412903	0.2706933136559146	15.841818902425775	-1.03460423317306	15.632523836702555	-1.2528442247877214	16.373297036772538	2.167278664590206	16.158736471194633	-1.8180127303177724	15.241223860423904	-1.7784378998285397	15.231156220183815	1.1148293106906835	15.298775804785839	-0.18670501527018615	14.460826864891759	-1.0427923106272043	14.456207248807512	-0.08211660061090581	13.367189817285874	1.2297222082451575	16.668799407635717	0.18437164229231387	15.29894879076571	-0.527023917575237	15.491954741846579	1.1451358506669889	15.150713643295466	-2.171799342375856	16.5049426370958	0.6294275036600582	5.892603016078615	1.4727657561757053	6.284785352776017	-1.145367038708786	16.05860593903382	-0.8956584690377901	14.68779603236407	0.521648136854779	17.523786503429395	-0.0030249624457097256	14.6283708971551	1.2927355309474622	14.846307349640572	-1.1988957629096426	14.255855080403512	-0.4545460002683811	15.054220706377041	1.0977137374654204	13.508112617182848	1.732547766563297	15.210307404267631	0.7375803442114919	14.397309751158712	-0.23515890092114863	15.367955193860713	0.2599659487456563	15.933609657905473	-0.7375190211617138	14.163666199575278	-1.3683988706460768	0.9054096166784664	-0.6834240422289612\n200000	1.8619163905982283	1.7378079259329797	0.6986385626767067	-0.07804743231120251	3.150476592746881	1.9402836398641101	-0.3803326854363361	0.3268863808798904	2.593756663790738	-1.0503249675483446	1.4811015112056989	1.6642726337750178	7.664621579181798	-0.7128953126588903	12.408186350991025	0.6305113545459133	2.14654045492174	-2.968599999510284	13.388511268295025	-0.1750835932191311	13.608909075112	-1.0547515935368899	13.527899810858038	-0.8878125456288605	14.768686893701526	-0.4820947885698783	13.408895420756249	-0.23853287629160685	7.16568978075173	-0.2382059129626133	13.528642634114533	-0.8859704237148519	12.015358127171458	0.013093038643019318	13.806634601141287	-1.0355549829383373	14.59791301363786	-0.19810967382893482	13.788062696835576	-0.2477499419535889	14.317113545170773	-0.5980671361856527	6.164459106567083	0.3502610513642744	13.017102867400295	-0.5939873578444671	12.097839256617773	1.0541765739185676	13.10073710993552	-0.6133917960273139	6.8008418576130145	0.22297445721251505	7.8829848104736175	0.03904670406460211	14.747309913120322	-0.6162868477822467	13.87125368750546	0.0203229269672201	14.46687036539478	0.14553399816683404	13.905270187813498	0.5718672658264167	13.045429138569254	-1.131248630947913	14.445612076556218	0.11319891913462488	13.921778217391545	0.30668094135981905	14.087497001222875	-0.3771511966248608	13.475872606136718	-0.17062611530448807	14.200477714582828	-0.014259993287648366	14.735903679792557	0.1396207950533645	14.602337274495847	0.8830846077913164	15.933416464530755	-0.4975443986876541	13.06804329285911	-1.0195809168114518	13.187889914170105	0.12470522406597906	13.658956084659579	0.5645655401134859	14.398071997130732	0.7455389254135003	13.882064152496266	0.5218321002940223	13.550561388356636	0.42919250601765896	14.576296561797369	-0.7252375702804043	8.656535357567572	-0.4819331307727776	13.895394041003815	0.25364136340909127	1.5128458212226255	-0.35298273931032514	3.235052952719319	-0.6295253991728746	17.618496019173296	-1.2530323291782213	17.81963076963895	-1.3097000541748138	17.93648030193451	-0.15671668820954054	17.69154219600892	-0.10864287675046269	16.9955976352022	-1.0545768617444975	17.24776936654019	0.06408058476897564	17.32567380647095	0.0889173303107702	18.62098222102857	-0.426958189411158	18.129673261731945	-0.1328561145875874	17.30184122055785	-0.44391860071503636	17.694006496167226	-1.7049631379637995	17.161735494869497	-0.9843348965237694	17.53839523413638	-0.5520073227928832	20.24104829797875	-0.850474010557386	16.924548406799012	-2.0235267447472474	17.910961663961363	-0.6342695231454687	17.47796878271013	-0.9573440869350361	18.21864224992336	0.10637341151468244	16.66832650520622	-0.6587779734831538	19.99113311822515	-0.5126688612148682	19.967975861224826	-0.27445923768721847	14.690603236077067	-1.4720692342676236	18.312482174729638	-0.6443433725748022	18.070164275511793	-0.39477903575478224	14.10414460945951	0.5391759557785759	18.788978935361033	-0.779549670781061	18.652283187223645	-0.47969651335509617	17.703597685532582	-1.4238523464957134	17.912846206090492	-1.0245447758492832	17.42444591705457	-0.8534737420416871	17.986513429400617	-1.6113302964499963	17.853774513799248	-1.1500327391625664	17.63371388576215	-0.8610208642136403	16.689504817454072	-0.8323070567707234	16.846322401095396	-0.8331416952494084	17.678700456048368	-0.7795942864818048	16.67476190362584	-1.1347659439995512	17.100139621580215	-0.6960009609733965	18.19657204511011	0.14265202436146887	17.82819467476429	-1.420729882381862	17.796056260309342	-1.1988018366758866	18.269353525558287	-0.13026462822059043	16.55637842629283	0.321021800791107	16.93778587200355	-0.5242677357750916	18.285894073170997	-0.04899429305750959	17.627605746952405	0.030250165259533907	16.324313100859403	-0.7673531177692736	18.643398303545553	-1.1062988659980637	6.696521358282698	2.1137801664229565	6.355234607685932	1.4478921258827535	17.633324792497966	-1.031484379463035	17.28433664472395	-0.6184714457562519	18.26206549668662	0.03614597847639006	17.800211549992653	-0.19917204172177336	17.726390496187623	-0.2263200125420462	17.316948610904827	-0.3454375630230366	13.734468170930574	1.5973719558547952	17.641455391004744	-0.3469291094492417	14.62852233403212	1.6562508229578101	17.419954705905134	-0.8966470918449287	13.660668108451661	0.9666468066676793	16.975365328035124	-0.9337423069397625	18.590676983179257	0.7402578876243295	-0.14183797091646225	1.142903845902613";
myData = "state	A/Arizona/14/19781	A/Arizona/14/19782	A/Brazil/11/19781	A/Brazil/11/19782	A/Lackland/3/19781	A/Lackland/3/19782	A/USSR/90/19771	A/USSR/90/19772	A/California/45/19781	A/California/45/19782	A/Lackland/7/19781	A/Lackland/7/19782	A/Bayern/7/19951	A/Bayern/7/19952	A/Beijing/262/19951	A/Beijing/262/19952	A/Chile/1/19831	A/Chile/1/19832	A/Denmark/56/20031	A/Denmark/56/20032	A/Egypt/96/20021	A/Egypt/96/20022	A/England/2/20021	A/England/2/20022	A/HongKong/1252/20001	A/HongKong/1252/20002	A/Johannesburg/5/20021	A/Johannesburg/5/20022	A/Johannesburg/82/19961	A/Johannesburg/82/19962	A/Latvia/686/20021	A/Latvia/686/20022	A/Madagascar/57794/20001	A/Madagascar/57794/20002	A/NewCaledonia/20/19991	A/NewCaledonia/20/19992	A/Peru/1621/19991	A/Peru/1621/19992	A/Peru/1798/19991	A/Peru/1798/19992	A/RheinlandPfalz/34/20031	A/RheinlandPfalz/34/20032	A/Singapore/6/19861	A/Singapore/6/19862	A/Stockholm/13/20021	A/Stockholm/13/20022	A/StPetersburg/49/20031	A/StPetersburg/49/20032	A/Switzerland/3100/20021	A/Switzerland/3100/20022	A/Taiwan/1/19861	A/Taiwan/1/19862	A/Texas/36/19911	A/Texas/36/19912	A/Bangkok/1544/20041	A/Bangkok/1544/20042	A/Dakar/88/20031	A/Dakar/88/20032	A/Denmark/22/20051	A/Denmark/22/20052	A/Denmark/3/20051	A/Denmark/3/20052	A/Denmark/86/20031	A/Denmark/86/20032	A/Egypt/136/20051	A/Egypt/136/20052	A/Florida/4/20041	A/Florida/4/20042	A/HongKong/35/20061	A/HongKong/35/20062	A/HongKong/4580/20041	A/HongKong/4580/20042	A/HongKong/4596/20041	A/HongKong/4596/20042	A/HongKong/4922/20051	A/HongKong/4922/20052	A/HongKong/948/20061	A/HongKong/948/20062	A/Hungary/2/20031	A/Hungary/2/20032	A/Iceland/123/20031	A/Iceland/123/20032	A/Johannesburg/28/20051	A/Johannesburg/28/20052	A/Johannesburg/452/20051	A/Johannesburg/452/20052	A/Morocco/275/20041	A/Morocco/275/20042	A/Netherlands/128/20041	A/Netherlands/128/20042	A/Poitiers/2168/20031	A/Poitiers/2168/20032	A/Reunion/1409/20031	A/Reunion/1409/20032	A/Shenzhen/227/19951	A/Shenzhen/227/19952	A/Thessaloniki/24/20051	A/Thessaloniki/24/20052	A/England/333/19801	A/England/333/19802	A/India/6263/19801	A/India/6263/19802	A/Annecy/2013/20091	A/Annecy/2013/20092	A/Berlin/59/20081	A/Berlin/59/20082	A/Brisbane/59/20071	A/Brisbane/59/20072	A/Egypt/10/20071	A/Egypt/10/20072	A/Finland/4/20071	A/Finland/4/20072	A/Fukushima/141/20061	A/Fukushima/141/20062	A/Ghana/2/20081	A/Ghana/2/20082	A/Ghana/9/20081	A/Ghana/9/20082	A/Ghana/152/20081	A/Ghana/152/20082	A/Ghana/163/20081	A/Ghana/163/20082	A/Ghana/FS-09-718/20091	A/Ghana/FS-09-718/20092	A/Ghana/FS-09-791/20091	A/Ghana/FS-09-791/20092	A/Gyeonggibuk/4500/20081	A/Gyeonggibuk/4500/20082	A/HongKong/18106/20091	A/HongKong/18106/20092	A/HongKong/1856/20081	A/HongKong/1856/20082	A/HongKong/1870/20081	A/HongKong/1870/20082	A/HongKong/1988/20091	A/HongKong/1988/20092	A/HongKong/2652/20061	A/HongKong/2652/20062	A/HongKong/3176/20081	A/HongKong/3176/20082	A/HongKong/33597/20091	A/HongKong/33597/20092	A/HongKong/34079/20091	A/HongKong/34079/20092	A/Iceland/8064/20091	A/Iceland/8064/20092	A/Iceland/8599/20091	A/Iceland/8599/20092	A/Incheon/4532/20081	A/Incheon/4532/20082	A/Madagascar/2121/20071	A/Madagascar/2121/20072	A/Madagascar/6054/20091	A/Madagascar/6054/20092	A/Madagascar/6081/20091	A/Madagascar/6081/20092	A/Marrakech/510/20091	A/Marrakech/510/20092	A/Marseille/1148/20091	A/Marseille/1148/20092	A/Mauritius/403/20081	A/Mauritius/403/20082	A/Menya/1386/20091	A/Menya/1386/20092	A/Minsk/179/20081	A/Minsk/179/20082	A/Montpellier/2051/20091	A/Montpellier/2051/20092	A/Moscow/2/20091	A/Moscow/2/20092	A/Netherlands/345/20071	A/Netherlands/345/20072	A/Paraguay/61/20091	A/Paraguay/61/20092	A/Paris/577/20071	A/Paris/577/20072	A/Paris/781/20081	A/Paris/781/20082	A/Perth/200/20081	A/Perth/200/20082	A/Rabat/109/20091	A/Rabat/109/20092	A/Seychelles/2239/20081	A/Seychelles/2239/20082	A/Singapore/10/20091	A/Singapore/10/20092	A/SolomonIslands/3/20061	A/SolomonIslands/3/20062	A/SouthDakota/6/20071	A/SouthDakota/6/20072	A/StPetersburg/12/20081	A/StPetersburg/12/20082	A/StPetersburg/5/20081	A/StPetersburg/5/20082	A/Wisconsin/13/20091	A/Wisconsin/13/20092	A/Zagreb/1982/20081	A/Zagreb/1982/20082	A/Siena/10/19891	A/Siena/10/19892	A/Siena/9/19891	A/Siena/9/19892	A/HongKong/2387/20071	A/HongKong/2387/20072	A/HongKong/2613/20071	A/HongKong/2613/20072	A/Incheon/2647/20071	A/Incheon/2647/20072	A/Johannesburg/141/20071	A/Johannesburg/141/20072	A/Johannesburg/67/20071	A/Johannesburg/67/20072	A/Mauritius/543/20071	A/Mauritius/543/20072	A/Pennsylvania/1/20071	A/Pennsylvania/1/20072	A/Peru/1169/20071	A/Peru/1169/20072	A/StPetersburg/10/20071	A/StPetersburg/10/20072	A/Texas/5/20071	A/Texas/5/20072	A/Tula/5/20071	A/Tula/5/20072	A/Ulaanbaatar/116/20071	A/Ulaanbaatar/116/20072	A/Ulaanbaatar/2212/20071	A/Ulaanbaatar/2212/20072	A/USSR/92/19771	A/USSR/92/19772\n257800000	0.7944155715723022	1.504068845648296	0.5391149740652772	-0.23920262708179468	3.114818522890981	0.5333967594072816	-0.6189230855087916	-0.6449387615691432	3.196476067827965	0.5287004656052859	0.7080784445886401	0.8297176849321515	8.645075995709776	0.5077020283545813	13.585207703139826	-1.8831281475795492	2.393973304813752	-4.254887235418035	15.387425277032417	0.40137108706134106	15.158335547560533	-0.11567238432436974	15.465712588832261	-0.6493584253755706	16.876511563294844	1.9686075233864415	15.694757236914315	-0.3804307930075141	8.39220174343206	1.1050596738506424	15.060225224877817	-0.35064290689901917	14.764611096437916	-0.7013802645559554	15.642914051111312	-0.4578139881499892	16.213085024147517	-1.2279986340987055	16.169636624101894	-1.669797725119873	15.676122547714222	0.6679554953390058	7.6054406794043725	0.8863131066803531	15.432575339492036	-0.5088605173267595	14.84371949108379	-2.3252659991518994	14.7223187828772	-0.9219655041596898	7.949685706775281	0.6718474508138668	9.027505129357918	1.2455977329506807	14.989157167123064	-1.143353321606802	15.21495982038778	-1.4861633110202046	14.663777380954663	-0.5653808980121487	15.633131229078884	-0.7859361043726283	17.066427305637603	-0.21606375596552244	15.878032814312622	-0.09929008061274036	15.788422006141186	-1.3999362545015996	14.201532603157615	-0.7534859358665894	15.345215399002566	0.09129643498275203	15.135052379426979	0.34327765441470753	17.00617141374243	0.6755573170850528	17.480183519972147	0.16557555236547916	16.32749908501308	-1.514912708944402	17.249910760824484	-0.7075935166384035	15.019861746199727	-1.3502042852427194	14.831329056087569	-1.2720144620796345	16.20210623781385	0.02059103034124253	15.34799620555292	-1.4603560197461734	15.597686349577742	-0.3544305881452591	16.055715472051713	-0.473041428035307	11.269890187860865	1.6215688902402112	15.876083814668124	-1.4592154586859767	1.6825111758402325	-1.3834868739900608	3.590011355028871	-1.5532414904453746	20.62728191745316	-0.9454397099448224	18.862309310302265	-0.31849165237894445	19.50976784178941	1.1197558087784931	20.102102823508968	1.302836472057173	18.196546576695596	0.46939576028978025	19.047556465176566	1.610834770050192	18.25698194047978	0.4443947097345	19.013877395334408	0.7518516554949903	18.65723256099318	0.14159892966191454	18.396125650071912	-1.458065701049335	19.561916225766986	-1.362792083914261	19.7663471777835	-1.4544474283614008	20.651637240621163	1.579128639017796	23.65978850982952	0.32416748128474027	18.8064082713863	-0.7876837934900701	19.523321351108233	0.9365125674534434	21.16724068469957	-1.656725848816901	19.732060674386375	0.9636347021692205	20.132281416613527	-0.20949960272229518	23.321765454764467	-1.0621664186572168	22.53068813719714	-0.3142413119596965	15.861959384472222	-1.4238661126444774	22.282653755399885	0.2814082229399776	19.470555511764243	0.8254427033340588	15.698150523942312	-1.2706954886651567	22.683576081309514	-0.5036071532211392	22.720461528263517	-0.6210198582064786	19.13867778859469	-0.5536370220685687	20.88934331388452	-0.4604105437354059	19.691330371895827	-1.4601427196372128	20.601188921205516	-0.00996053005638161	19.65306761745114	-1.38442482091267	20.689869766361912	-0.5179386987987599	20.922537609638862	-0.7416502412632204	18.20086450405933	-0.2769082126307787	17.556296407113003	-0.750739488043789	18.792230701134777	-0.5621026378415649	18.659051772675237	-0.9150349447826245	19.864762771578754	0.523660834692725	20.344613476757562	-0.6386034213113347	19.30017915838209	-0.40486625203052856	19.179536844453196	-0.8793301159773698	18.383457219027484	0.09348571194854816	19.34055082960124	1.4221151473021836	19.851892796290514	0.7819776290353644	19.73952884342614	0.4507972120274235	17.80429505383014	0.25303288637959365	19.16331537328688	1.1461897384067388	8.294655964471186	-0.3129667326983998	8.042096240945462	1.10742802928631	19.41282846454731	-0.7332263228009313	20.56544914029614	-0.26808965692864817	20.3535770883079	-0.10427829435387548	20.688033864859804	1.4100160281749208E-4	20.114876105898627	0.6523319612303902	18.6382382904721	0.027000177640249534	14.392437169155427	-1.6352931765940246	18.575338409562345	0.6068189398898991	15.992028959866472	-1.9951335611211662	18.829370362632517	0.36393830022234785	15.112730737329933	-2.0725907949528133	20.150160618508842	1.0111184789317142	20.2675220621436	-0.25562416924048126	-1.1103735773607268	0.019846376738283267\n258000000	-0.46275369895629526	1.724127670796012	0.30615302347629564	-0.09979379258058604	1.8097758875401233	1.9140698150047504	-0.8072575532738353	-0.10008993473008033	1.4098849836311544	-0.10872781463198436	0.5433146191698569	0.5525726642095277	9.763445857375777	2.0070984096689344	13.652070947761265	-0.9717513709463969	2.82239609601905	-3.609937255768013	15.349468970489404	-1.544768057457298	15.560146747410773	-0.18139075146666825	15.872405422537083	-0.5711880277882486	18.70048927657067	0.17229246822468905	15.579809488829962	0.026530226330796214	8.89431535659634	2.012945426733679	15.555950083843527	0.10631618385002004	15.305457613126688	-1.2043496971688328	15.911130826318237	-0.40190954437942245	15.626792747432003	-1.9975328932921488	15.336146451872462	-1.9109129043959154	15.271204655420203	-0.8714489988504845	7.358889440282596	2.0773486229142533	14.692777614643655	1.4740098029216422	15.453638601812244	0.3291745994121079	15.338182803007987	0.6230583663598042	8.46567489315596	1.1856041952840877	8.968375407853543	1.0460061616866112	16.331097866410254	0.38355004517482194	15.981488775369565	-0.25572151314286273	15.961389550135515	-1.4920930584747636	14.454830531075018	-0.44290287057040445	16.438595681588605	-0.40961172587943695	17.245306039364827	0.11230278321137227	16.464399178131202	-1.4148480630554703	16.0331113252335	-1.1564672995796221	16.45894639899991	-0.36871466013795506	15.596983225101685	-1.2808777695788531	16.55491812558381	0.9191354123068383	15.545157512336386	-0.32157808857022774	17.563687268939955	0.6294383169047806	17.358978346952398	0.4021409866665422	16.194462137311803	-1.2882301979970698	15.200103041963786	-1.5020393171336117	17.05645284731624	-0.4463170379021716	16.02699980652669	-1.3499657825970826	15.153896510660731	-0.3844340606682115	17.297079419927567	0.782850629405353	10.329906079367735	1.1262341684699373	16.297526685796868	-1.5505783673225562	1.405367687342098	-0.9052893662262075	3.2536476356019746	-0.5687884417339031	20.364107953153194	-0.9088394835198585	19.368076192251248	-0.6858257946988272	20.202503040787317	1.130994503255025	19.148080910897427	0.9899034846535679	19.639109922520156	-0.11056304150758015	18.775210086597333	1.2475229998835262	21.565576934549547	-1.0305843533712964	19.4718461452466	-0.17321086979208566	19.482146217675037	-0.58471092572845	19.998577924535816	-0.7073090390154639	19.961793170254094	-1.0112709593057791	19.482251927236792	-0.4333898253303016	20.542960782088926	0.2356288730309281	23.400176909388726	-1.1547773310311444	19.20239535461191	-0.35120030079769854	19.64624797868285	0.932178929177591	21.334776530872066	-1.0346322468869025	19.498823004653605	0.8171077221708996	20.408970770518962	-1.7400497776850916	22.5707773126083	-2.2827669134547692	22.876296386635786	-1.8931760225184209	17.352098215301954	-0.32847855553709315	21.070910522313202	0.022110784099089516	20.23140232553299	1.0730199705732104	15.912884208979573	-0.6509275768376648	22.923128790096193	-0.8611181815429949	22.580759530297076	-0.8838153623156415	20.083158974981007	-0.8492859578770342	21.13801684759975	1.0066797050491314	20.315112055960107	-0.5632897692537853	20.419471665958074	-0.3578885413556079	20.41537314621204	0.45767293682210763	20.368887187570305	-0.5783549285505605	21.446741319924016	-1.13269385900946	18.616667278820323	-0.3325859603486749	18.5354413160359	-1.1136818473412078	19.200154412334914	-0.20210283813288732	20.10185183172545	-1.181605877915599	19.186330690622714	0.23575274515226402	21.54539821494432	0.552887408725571	20.23464752198947	-0.5333096976298937	19.776961361526013	-0.3747744956097785	18.57568613680628	0.1197531746283901	19.515587857158927	0.2240356030568414	20.348321056163748	1.188988318901995	19.264793383080978	0.8348315817545453	17.722967291589175	0.5118463125052625	19.54273045962346	1.5864018556507125	8.448974267295373	1.8434826447075483	9.694899834335622	1.6745596096718804	20.38096794092269	-0.22623965236762378	20.21693565769149	0.6582657921709331	20.176239763093065	0.8636898177861727	20.440787431805383	0.39504561339597766	20.72694541387957	1.3228855076842154	19.86431006933664	1.799668477732951	15.120509136805563	-2.539734732694599	17.97922924015965	1.8045509223637275	17.047720781065816	-2.2005238888760026	20.55662504607196	1.5460084507228609	15.793942135490585	-1.9225368265577307	20.636844530487398	0.5067554730288707	20.268015413934986	0.48501163425216554	0.10942453174337108	0.1280142739755077\n258200000	-0.25879446108509996	0.6907884443710385	0.6609457643465367	-0.5989624253518729	1.7051864273815038	2.0312132522163555	-0.47538071517236524	-1.1165248318301284	1.2318939143598917	0.9222046678480104	0.5952340959965933	1.2542975983458748	9.111502827361313	0.7070165699422426	12.93014230704564	-1.270626050533561	3.351586262395881	-3.2058609102027544	16.248356103993178	-1.3888550136615279	15.003707362856542	-0.6383722077068277	15.082115578291608	-0.5607237172827024	16.933053907127952	0.08833216485210658	14.631499814501803	-0.963056648429349	9.169242168335776	1.3009104019678195	14.86186635784986	-0.8444232713100965	14.097279756150101	-1.190280724293409	15.322889487454141	-0.6942261775796477	15.876785065885105	0.4977697822222634	15.815302954021863	1.2935861994309046	15.75176871442347	-0.030479895320281336	7.509436947413191	1.0338136701833192	14.51904792560265	-0.8010463200100317	14.5581486557088	0.7643839868940245	14.634849606419264	0.10410880195066143	8.263785117772569	1.5059315488792993	8.035806273025548	0.3987822428037098	14.945173693298113	-0.7484206425431768	16.368977699567917	-0.3870835011320064	14.893263784070612	-1.940349094557249	15.568501258430747	-1.540797738054237	16.421311159473614	-1.6601991095083521	14.357957586470652	0.33092331394220087	16.03154085635211	-0.16682957888858296	14.368741141186245	-1.1542777893691623	14.810561342599975	-1.4817385605886566	14.961835003243136	-1.3400512476574977	17.220173169975652	-0.40340930113567003	17.198654226621493	-0.9985475891621451	17.172280255984187	0.40985122137917884	16.373193688107065	-1.6344650645549388	14.660256431711849	-1.4454008927609878	14.115895093304609	-1.2809432385054373	15.849684583645642	-0.328542745706813	15.286267423791685	-1.9017221426288144	15.532739922558292	-0.43950265109352515	15.871056039670489	0.6490434112962131	9.346839501615676	0.06809285705009094	15.822966770938692	-1.9048912565732874	1.792442747119999	-1.1676070775788108	3.391226576914871	-0.7082417020178132	20.414955630202215	-0.8071939807144658	19.99170158635548	-1.7064350141469726	19.459025158777408	0.8193529528876382	18.91637129330818	1.085659870139196	19.35694911341308	0.046389903817189326	18.39670145470097	0.595135391375178	19.292147327637267	-0.018793598299602234	19.872701142470454	-0.19405372161280748	18.38930215817435	-0.3038759597365818	18.35939593799314	-0.49771433763757505	19.262278113049184	-2.520147365023898	20.06296824738036	-2.455213641977413	19.81256804609806	0.124351506752587	21.91791300988474	0.20639756993138067	18.56288795504452	-0.533623167297691	19.18564709419495	0.7677426976415174	19.97651579592068	-0.9552613001058009	19.204875261366315	0.6080231896957315	20.09409155044693	-1.7050585378625727	21.356084694292722	-0.0726235949706524	22.413150186369165	-0.03448665204327492	16.606984979522196	-2.1813987879968155	20.829883489646484	0.4253744513277688	19.420103373433623	1.1399336868903476	16.548687444829284	-1.4272044501755365	21.779986533724557	-0.35740863455752075	21.84782596658108	0.06382509896641171	20.325603472534702	-0.9112739382278903	20.030340806461954	-0.4301623853955083	19.892586793782126	-0.7104643706477095	19.700460894911338	-0.42726758980661905	20.149047835360832	-1.7693610826891102	20.977973037805235	-0.29264855564770753	20.101760349432745	-1.06197634470929	18.137412108288054	-0.695565584552724	18.08402914109341	-2.881468808316819	18.785467860624156	-0.7848085289683113	18.81741492901653	-1.3422963491874729	19.94801146685909	0.27839429243753305	20.81933419473304	-0.06608453523693358	19.786011301060935	-0.6148001767090253	19.65856230919748	-1.3432739166302041	17.94146522870926	-0.2751052214851616	19.27790653545379	0.2745977606838627	19.583931591490174	0.8869797683255578	18.952400019564372	0.027206381851198724	16.579468051830812	0.05348013024653955	18.89596766131323	1.7917081147585388	6.700455598822088	0.8019975075263773	7.853500740550048	1.3272482783192632	20.191336865100187	-0.5820901334050338	20.095732592224405	-0.17643476726677415	20.603075345632973	-0.35186987695502214	20.186928045856025	-0.05057911404318616	19.259385049497283	0.8954201365268855	19.26153744922938	-0.016925427552612893	14.870430994732985	-1.9164366863203823	17.906678190844943	0.9024660998283724	16.10877824773506	-2.80407127679343	17.589054877334526	0.40814070905842587	14.265348056075965	-2.1969371595112617	18.955441978762035	-0.20638648264690307	20.737662588969975	0.12540128758518698	-0.7882142295470975	-0.531402111128868\n258400000	1.9996180964175956	0.18423786273745252	0.3202527473171918	-0.43467950866844035	1.8092881535199279	1.90857206418056	-0.571143635303045	-0.3548323483900534	-0.7018642832472378	1.6725613896214568	1.384958592158164	-0.2987698447440794	8.752868031496215	1.8606832891511185	12.604371760828414	-1.7190918554884942	3.363814170178066	-2.0143567055915197	14.0343258688053	-0.638006666427466	14.755866017191957	-0.2649836165605775	15.556718528652121	0.3226255569542118	16.093907866661567	-1.3836401413688948	14.181253599294198	-0.5713406720557335	8.449733547565234	2.287361468371411	14.407597470587335	-0.37592917298525785	14.109275591015535	-2.0849777513446286	15.174853157891953	-0.7918727229504616	14.901447916067355	-2.663787188215462	14.619235962306801	-2.621631383026954	14.85038212206784	-0.7306208554632642	8.082530416586934	2.0276799616767955	14.218816383879364	-0.6423564097493897	13.499007562824662	0.472629652345647	14.864694806081765	0.3379891958222285	8.57664929081162	1.33395756387065	9.057399746469548	1.6198808813169305	16.123643811287234	-1.4842754329303756	15.402888376442222	-0.5238240054031531	13.993891938126637	-2.7663160104315203	15.96997981231458	-2.057292415593535	15.974225932856905	-1.3197664599789236	16.501073860880457	-0.9617523248850506	14.82637392338503	-0.7294773476194988	15.564898330156382	-2.7742178995092277	15.116748410372765	-1.667804479839743	15.077680660881928	-1.618309164299851	16.957080875961946	-0.4420102215215452	15.458905960243095	-2.1445108475999866	15.979956423648192	0.14714921676980997	15.583040496926914	-1.2352603415323773	13.654325020348672	-2.258327488550338	14.278290046139176	-1.8803645568770309	16.63093574895028	0.028629328926000785	15.215369914759087	-1.8058902968257093	15.851841464025203	0.5283665717870274	15.006265660323464	0.5745915250406692	9.360437828576881	-0.41496805753897836	15.46717165726196	-1.9572583554462468	1.5207802819900373	-0.569254010093411	3.714325751045413	-0.08507267922218942	20.602396632804933	-1.4826396038632141	20.008606837427983	-0.5059643982329461	18.85676554023128	0.8860104220927776	18.607781110116715	0.9746844152407201	17.36073541729114	-0.12159998087856551	18.16427409430203	0.43828546034207455	20.449512851548025	-0.49272212085871125	19.38114988467917	-0.7362784992031195	18.083714797493005	-1.209174731091265	18.92261252405708	-1.5820204003176292	19.40901621257628	-2.3145904977937195	19.43733994199976	-2.276522610072637	20.339297182117836	-0.3372688007210439	22.07010465245658	-1.6957584201583875	18.64557985598904	-1.302074551000145	18.75002501111706	0.1190831440092708	19.689910116243627	-1.038395501299199	18.913214392478807	0.2402318031303927	18.618651777121833	-0.6072710959810963	21.78365549102036	-1.8544616941003254	22.175470490077576	-1.013152127633172	16.5336944574274	-0.822025357863832	21.78108916621317	-0.37351043617502705	19.49967524782828	0.5748318698526252	15.713650511810297	-2.521571371593108	21.936708257740754	-0.3838785986104273	21.68916574827196	-0.04178271737523022	19.013351164091453	-1.6046542515329714	19.992676223535025	-0.5984048399785868	19.146037029894742	-1.1773538507282804	18.363772693769576	-1.9518928202995611	19.01566384303898	-0.8370957984467224	20.666701587499848	-0.8688582853640383	19.12378076781788	-0.9633974083624592	18.027181113696415	-0.6912104391687531	18.360355322510586	-2.7433784563112935	18.222363962621305	-0.41703282149280224	18.535464174766908	-2.124474558263242	18.38683487661124	0.9777921748170246	19.80072445730393	-1.2298949216411823	19.195537345941222	-0.9623311627349489	18.726893919420316	-1.0191164777438722	17.831140920877317	-0.35929557540574264	17.917619892022998	0.9110972566122986	19.232820040878273	2.127292583332929	18.971943884853246	-0.09107138716187393	16.460295591634136	-0.23801782827887152	18.27570810690843	0.7588147212860802	8.648808890937357	1.9039880341625959	8.961004087276315	-0.24006974701526518	20.346484335913186	-0.5795740668526332	19.829128044057605	-1.627291498332442	19.192223654124213	-0.09222526100858185	19.32065607105545	0.08479383071645241	18.566945403825528	0.5327491142334351	19.38979161734008	-0.4325612081208797	14.406101209978564	-2.1410766784449593	18.32152437198242	0.3209446217124047	16.413621143393463	-3.059787719739304	18.331821480350925	0.2594347798351513	14.909089139597334	-2.7677610025806967	20.125606100998237	0.37866894072529483	21.09042595500733	-0.15311782600247237	-1.426968727253001	0.32279519967952897\n258600000	0.861088265121569	1.61358149860823	0.3181719569222507	-0.004858567798372791	2.652899928485586	2.3739711439372764	-0.6185082735690096	0.49453212869552876	0.33891819181728716	3.494334271613167	1.0921171702214933	2.0033854807011258	10.051314804642402	1.7966930145987114	14.519431844860748	-0.342673214383027	2.869861998483896	-2.2267567095480545	17.61059742872534	-1.7196896515470474	16.749936731836502	-0.08751161065871442	16.51644603797231	-0.8945360881986781	18.528511825854437	1.503231510562519	15.658652372790293	-0.7904696614337431	9.954560798064424	2.4567850597052177	16.336389125183807	-0.9343494871980149	15.379341974110234	-0.8774731796192194	17.05627728129274	-0.6781137820617612	17.02223810040644	-0.22575225849535907	17.525217326943736	-0.8499670958212405	16.679098995107847	-0.6868129329490545	8.048158266802606	1.0488184648918253	15.431442333735934	-1.2088280336824213	16.617245541113753	-0.5781197520771413	16.220620184076004	-0.6666625880860253	8.801468192211088	0.3050049582580161	9.07603885587454	2.427076026245565	16.90661198628117	-1.122888479397226	15.839724653739452	1.114236316273508	16.77675786135143	-2.022762274346783	17.127728056292188	-2.109191683892622	17.6915980317474	-0.007341574087186999	18.26410735581186	-1.0254336205305479	17.414438518658187	-1.8278251715498648	17.072120117393876	-1.4365831037108132	16.27104208838547	-1.232423161691984	16.760247926486066	-1.1038983798055078	17.268850853150685	-1.2003493056429662	18.07375398499609	-1.6316695771831617	18.455971602855445	1.0330790972423964	17.574106397559728	-0.6307527239765092	16.041474476372233	-1.609042476677647	16.699409500889683	-1.4958677634107649	18.358434287838264	1.8160412814617746	16.292593212747068	-1.774721362102536	18.17842288789867	1.7048989802620456	17.098467213161886	0.04497280135203696	11.175352170046676	2.3779830381743032	17.508251287950984	-1.7372116412315612	1.3478762604269767	-1.5181097136735007	3.5611866659822784	-1.0278082287549835	22.140528601388944	-2.099984134136808	20.871838688529696	-1.1810712306999003	21.379754521046472	0.6240683933315124	21.645336361656025	0.9304646624858446	21.289129210137173	-0.8889280969104683	20.181291844824848	1.5834712786652385	22.262047952646384	-0.503881606231831	21.803730934937736	-0.4701128226654948	21.421216503591463	-1.3714881709440154	20.975152578777013	-0.9549074928584982	20.23110654549266	-1.4342037211243124	19.008528935634953	-1.7093914264709469	21.815022709926698	0.4183367011787088	23.863685459940097	-1.2557835835239317	19.887881397116164	-1.0282900583392554	20.738109085062252	0.2658041047016374	21.505907772151698	-1.1655310312537361	20.60693019776206	0.4606138809615325	21.300194279180747	-0.521311389276712	23.22342182127247	-2.3145465433428116	23.52730340900237	-0.14416132041768415	18.0856713659429	-0.46661634456624096	21.91274753346664	-0.2452269698550426	21.012840521194335	0.7981324877811703	17.898030087075178	-1.502256131223342	24.73781074923244	-0.6488118618186824	24.671427178824104	-0.6717148988580147	20.29023162253681	-1.1054673793558356	23.007371278655892	-0.651355267021895	21.579686967669264	-0.4689572012437343	22.48029400461918	-0.8115022933175147	22.26576212706976	-0.8872072270293991	21.767452588435624	-1.090381479517544	20.699976109876857	-1.055076696032669	20.425829875681877	-0.40702339274221255	18.944662560816695	-1.6050854552958522	21.471961051939886	-0.9492293543270801	20.22121250802693	-0.9718392232702352	20.893474131725124	0.28939942078122116	21.136329513606363	-0.8667577074148614	20.841005038184377	-0.6513324642703952	19.968422118134352	-1.3745463179559363	20.026677739315875	0.18253871493858057	21.36559789906013	0.40418183674715585	22.275472869296905	1.0902625538766333	21.48198347007547	0.6638327056454955	19.071192797017524	-0.06416670976466364	22.12405039188014	0.7207069328415575	9.399942758419396	-0.5065691872218758	8.465194489489809	-0.3667122952624484	21.79712771202575	0.12891003171703877	22.366567261124185	-1.7896513280200979	22.196329625697622	0.9787181127898583	22.81959822997365	-0.7519670848268031	21.293336275992903	1.0633454294645581	20.825470267237694	1.6710108705992313	17.075653605187682	-2.4281283884530476	21.062869761553202	0.6945448556821013	17.87956207971414	-3.4490177385961385	21.283110027554095	2.727740744997265	17.501134282173513	-2.380912714218658	22.32158295758475	-0.20640905129808718	21.898485550850555	1.6637727908429887	-0.6231118699359807	0.5489486118322602";
mySera ="state	A/Arizona/14/781	A/Arizona/14/782	A/Bay/07/951	A/Bay/07/952	A/Bay/7/951	A/Bay/7/952	A/Beij/262/961	A/Beij/262/962	A/Beij/262/951	A/Beij/262/952	A/BRZ/11/781	A/BRZ/11/782	A/Brazil/11/781	A/Brazil/11/782	A/Bris/59/07_F6/081	A/Bris/59/07_F6/082	A/Bris/59/07_F2/071	A/Bris/59/07_F2/072	A/Bris/59/07_F2/081	A/Bris/59/07_F2/082	A/Bris59/071	A/Bris59/072	A/California/45/781	A/California/45/782	A/CHL/1/831	A/CHL/1/832	A/Chile/1/831	A/Chile/1/832	A/Chile/8885/021	A/Chile/8885/022	A/DUN/27/831	A/DUN/27/832	A/Dunedin/27/831	A/Dunedin/27/832	A/Eg/10/07_F4/071	A/Eg/10/07_F4/072	A/Eg/10/07_F4/081	A/Eg/10/07_F4/082	A/Egypt/39/051	A/Egypt/39/052	A/Eg/96/021	A/Eg/96/022	A/ENG/333/801	A/ENG/333/802	A/England/333/801	A/England/333/802	A/Fuk/103/781	A/Fuk/103/782	A/Fuk/141/06_NIB1/071	A/Fuk/141/06_NIB1/072	A/Fuk/141/061	A/Fuk/141/062	A/Fuk/97/061	A/Fuk/97/062	A/HK/1252/001	A/HK/1252/002	A/HK/1856/08_F28/081	A/HK/1856/08_F28/082	A/HK/1870/08_F4/091	A/HK/1870/08_F4/092	A/HK1870/081	A/HK1870/082	A/HK/1988/09_F20/091	A/HK/1988/09_F20/092	A/HongKong/2/821	A/HongKong/2/822	A/HK/2367/041	A/HK/2367/042	A/HK/2637/041	A/HK/2637/042	A/HK/2652/06_F14/061	A/HK/2652/06_F14/062	A/HK2652/061	A/HK2652/062	A/HK/2652/061	A/HK/2652/062	A/Hung/2/031	A/Hung/2/032	A/IND/6263/801	A/IND/6263/802	A/India/6263/801	A/India/6263/802	A/Joh/82/961	A/Joh/82/962	A/Kumamoto/103/781	A/Kumamoto/103/782	A/LACK/3/781	A/LACK/3/782	A/Lackland/3/781	A/Lackland/3/782	A/Lackland/7/781	A/Lackland/7/782	A/Mad/57794/001	A/Mad/57794/002	A/Mos/2/09_F19/091	A/Mos/2/09_F19/092	A/Neth/128/041	A/Neth/128/042	A/Neth/345/07_F23/071	A/Neth/345/07_F23/072	A/NC/20/99_F19/081	A/NC/20/99_F19/082	A/NC/20/991	A/NC/20/992	A/NC/20/99_F18/061	A/NC/20/99_F18/062	A/Perth200/081	A/Perth200/082	A/Sey/2239/08_F27/081	A/Sey/2239/08_F27/082	A/Sing/6/861	A/Sing/6/862	A/SI/3/06_F8/071	A/SI/3/06_F8/072	A/SI3/061	A/SI3/062	A/SI/3/061	A/SI/3/062	A/SDak6/071	A/SDak6/072	A/SPeter/10/071	A/SPeter/10/072	A/SP/12/08_F17/081	A/SP/12/08_F17/082	A/StPet/5/08_F13/081	A/StPet/5/08_F13/082	A/Switzerland/79/851	A/Switzerland/79/852	A/Taiwan/1/861	A/Taiwan/1/862	A/Texas/23/791	A/Texas/23/792	A/TX/29/821	A/TX/29/822	A/Texas/36/911	A/Texas/36/912	A/Thess/24/051	A/Thess/24/052	A/Thess/24/05_F10/051	A/Thess/24/05_F10/052	A/USSR/50/791	A/USSR/50/792	A/USSR/90/771	A/USSR/90/772	A/USSR/92/771	A/USSR/92/772	A/VIC/36/881	A/VIC/36/882	A/VIC/7/831	A/VIC/7/832	A/Victoria/7/831	A/Victoria/7/832	IVR-1481	IVR-1482\n257800000	0.36799078226250315	2.1788792058611413	9.299985967047746	0.6428343990979413	9.292648336055809	1.9666174739258264	12.360563806871355	-2.32089700585624	12.841776187914903	-0.7927670005912159	0.6428513673163014	-0.4666133208814834	0.967194872525343	-0.34487931849269227	18.9593667075209	2.6147753574551733	18.76568641363339	0.9924442756832298	19.398422658944636	0.23119762906677643	21.460416522273373	1.5243671655875497	3.8554925560461157	1.423111098258183	3.116277434059908	-3.0454955954455856	3.305179889571727	-1.8620481715749344	14.561130091979807	-0.23377261506493424	4.920840508249214	-0.9563620794680371	4.425777775363035	-1.4628175859708583	18.426166679119163	1.1265612940119794	20.545525131517866	-0.12382658239890892	14.81383337511708	0.5255960820960643	14.654717074414306	0.04022285924437757	1.8124024693279446	-0.9859906954123409	0.8285338258331798	-1.5053273116130654	-2.263311207664036	3.5570999406979995	18.652339889433772	1.0151476482242459	18.500120604948453	0.7963759619204704	17.690832020779162	0.9107916965847624	15.59290800903809	2.3558969580439104	18.972537515521744	-0.9951494529283842	19.484528338435645	0.8731813349497175	18.988732240777182	-0.5642111372199995	19.56349041447457	-1.822452101608488	1.6288387636180695	-0.7896164930728056	15.451639897872408	-0.1969665744825817	14.767059109782839	-0.8558538101185225	19.069935442523	0.16311094544156213	20.003928956725304	0.9599508339006708	19.300104488004447	-0.504427700039433	15.717515177141202	-0.6831961128590375	4.23151402207824	-1.2910428337868116	4.274805791940178	-0.5508791006517324	8.423308677799522	0.8312367028848189	-0.08542190058768462	-0.1824394425097938	2.9118421816078284	0.03424211085126827	1.5026515544944556	1.5682718870867123	0.3841981914724135	-0.3239773472303963	15.098682484197745	-0.4764176892522699	19.301183054190442	-3.0595078029954523	14.926637950568603	-0.8870919626615335	18.358645571960416	-1.1561915752844725	14.58011445055072	-0.20938970970706833	14.266176936171542	-0.167778463130441	14.610140388338	0.2096862654503549	19.280691732260212	-1.316679961058869	19.30699572623203	-1.8159481786341378	7.20920058608887	0.6531387041796286	18.64815083936246	1.2363453665293698	17.993281287367807	0.07069390933324425	18.53115702814023	1.088210543770157	20.18077151744383	2.350638181371334	15.447177365606475	-2.2994331576194593	19.59841032701195	0.3756297583462725	18.813734692200576	0.8896130384964346	4.479552610812955	-0.3235530602627843	7.570658413217691	1.004565473997338	0.5602382468895806	0.9635648039158109	3.901678525433212	0.43671654887146544	8.305659431477824	0.24598095700803124	14.96121453789129	-1.2621873441908045	15.485584011670106	-0.9774271746386415	0.4109551807718974	1.211707453184013	-0.5942514690105366	-0.7639112324827819	-0.9797651355775266	0.6772104974520112	7.85743658996011	1.9268675709124548	5.052102669135396	0.5347283746087146	0.5063855546831704	-2.8485377267342993	19.74843784735875	1.3083536196527379\n258000000	0.1882550936436762	2.177628181128876	9.253258481743018	2.6530595378715103	9.380265564078291	0.8438289626897428	13.247746143776547	-1.3108290118079897	12.695773206721599	-1.0700261695128392	0.23902561526556426	-0.17525208746696375	-0.5061471311922405	-1.4353053489009366	19.471043761417853	2.378642986364051	19.26797382282518	1.5262980484086117	19.731687870882684	1.4704012991977546	21.122624114393247	1.679592548721388	3.124421164118072	1.3332109468250166	2.859513000186987	-2.225169735523913	2.020953478547937	-0.8317849432314602	15.278292322432526	0.7746915884852017	4.7875842055136175	1.4601601611445927	3.392666731039807	-0.18757628752207173	18.88250185026077	1.744828800117125	19.34355115147207	1.7623321949102744	15.677564862831742	-0.7750424000417423	15.293837232145979	0.26944833034110804	1.341139311626463	-0.25786762984100553	1.2876591870233796	-0.17671840684876194	-2.3395577713097824	3.09887939032148	18.39762309520156	1.630820996464643	18.415714411371148	1.3091370294319227	17.650862164263827	0.9507731918578931	17.59621157625863	-0.010842524094893613	19.00860832018391	-0.8479925393383767	19.703984898778355	1.004984558752899	19.810283090080947	0.9930300511284542	19.853204945953923	-1.6990352525524297	1.4482703950899392	-1.4177749547584355	15.835301488210437	-0.5335673134113204	14.439153992537104	-0.46794499235465814	18.962419370178996	0.12788179403903194	19.347315874340836	2.343278540705654	19.502506002051767	-0.032596574694098934	16.156309247232926	0.380162429390035	3.4990632006089135	-0.5934225249285845	2.420356481131222	-0.6579951790009197	9.557543008989448	2.4141323345491297	0.3446227191423137	0.9870611818971636	2.708323324859028	1.2589642245370432	1.0146441430005808	2.3084357220162874	0.2569035429662779	0.40291484545330425	15.151841530915007	-0.18022491197080526	19.43145551571716	-1.611989489510274	15.777626370612587	-1.947685889953304	18.883638679017086	-1.4262298326079836	13.979297077604784	1.1387397976800004	14.651271630040684	-0.036859094683204675	15.88609187045357	-0.02367858813009427	18.97350188644308	-0.9481120872061385	19.400313303971767	-1.7071026327592314	7.710880502397379	1.8463090081685107	18.83149356322064	1.3099114335301794	18.97360044438062	0.8733891420055115	18.381132128078583	1.7667767150714884	21.114776861663582	-0.21234317658134805	16.837909668122496	-2.6473925694837974	19.876586482224102	0.6532178742373281	19.772792819132558	0.4284008166424013	3.958342254174811	-1.395641281924325	7.830323054724744	0.8162518369779405	-0.5863161115327378	0.6246793867071083	2.5050704363346936	0.27421931198055405	8.33109489527192	0.8288118986956559	15.421366129794722	-1.3125065526149395	16.320775081147268	-1.5098496884269887	-1.1198923938259746	0.19963629462100874	-1.8535823980599144	-0.7239291136366239	-0.7116484478804276	-0.04224483992696107	8.91701292553731	0.5615244423569663	4.608235613044059	0.595874128763151	-0.11353535943126314	-3.793823903956873	19.799838004209537	0.5925894776762842\n258200000	-0.5866442396667125	0.9747326827865176	9.074285883075346	0.6073152236450414	8.666321111713932	1.8859215953038158	12.57675431749523	-1.8408156521504637	12.692740440600796	-1.0000930715212841	0.5778618249202867	-0.13853959993602089	0.2492436480094105	-0.11359374489825391	17.98842021747915	1.1812136690136947	18.563179102307792	0.8798866481455825	19.4953567344622	0.9548479692458771	19.83281387685584	-0.08292189544036965	1.565059069930962	1.6858530798333375	2.8509832332842366	-2.4718966147486996	2.9100202540428657	-1.3636666814345035	14.888041707918724	0.4504898471027795	4.066693637367955	0.912707638637909	3.616611744385109	0.8539123281050502	19.156654791565803	1.8551833107028235	19.245659558398135	1.2558776707587036	15.407736183292823	-0.3203872351024847	15.009383304091832	-0.3375918069422611	2.0223682114294976	-1.07455148514149	1.4599748946410205	-1.6787446054441748	-3.964986977718053	2.5100599040331883	18.04536082869009	0.9655149519999494	18.477587782605063	0.2653971128352227	17.79793504811286	0.7738079693785929	16.972656215516714	0.45987310926058006	18.501676402209117	-0.954087079971936	19.253406254428572	0.5618487271447418	19.60143669053941	6.565925161541308E-4	18.82329824293465	-1.7709619360667601	1.8938265516712052	-0.92439982947416	15.231835511024958	-0.8128535949247938	14.400136867795572	-1.0316407462921686	18.378619538573886	0.27957928998011305	18.919976475782267	1.8484067949550345	19.29345843691419	-0.6236047492086738	16.629236756580028	0.554683018616801	3.81814335730084	-0.596787452375157	3.647872332194374	0.26907133582892406	9.143649554567297	1.0305531382863853	-1.288307226220276	-0.3390363456135663	2.6981101495877313	1.118603244647146	0.09700751520734341	1.7969201424537673	1.3677747912817169	-1.197622833379324	14.725956529859182	-0.4769421429303796	18.698312164331732	-2.042807242480636	15.238165567798257	-2.293344816828198	18.45464086560282	-1.1872374515271205	13.94897852354416	-1.6558850583982219	14.625118506748843	-0.5535639910061108	14.64022781557246	-0.4974195966585937	20.286671750769365	0.6973126193042458	18.774454232002874	-1.1234376667982502	7.5534852208107255	1.183045344114046	18.387638893827276	0.9913742641872376	19.475333722801512	-1.0210469418209704	18.317459729154297	1.3856759379279886	19.481798040157656	1.2951660897571224	15.164330107379485	-2.8833344519525785	19.25409483571315	0.45293449364756394	19.04893226095235	0.5924280262625243	4.090632845274361	-0.900632734742163	7.241021335888631	0.708542606662529	1.225643690653392	0.17893686326298755	3.061024612394498	0.7699602579839714	7.411550616013937	0.7961251101063513	14.714655296720306	-2.5457603246471785	15.447986729631335	-1.6988946437434425	2.1622800311035633	-1.1440069166957325	-1.0554141275996105	-0.27449088856274995	-0.2947717071052576	-0.803954613980674	7.826688466335707	1.4438493538083312	4.2775627777312195	0.5862430894539474	1.6801614301169625	-2.1060405673279696	19.18358402720804	0.26505912811493715\n258400000	1.4513292256559414	-0.6610397192277879	9.262243610245115	1.8128186501839598	8.287050586394638	0.06651544970135603	12.710782656950151	-1.596229495392848	12.210484186160935	-1.5647598399034135	0.5670267594522036	0.10209818916220928	0.27154279082334815	-0.8511938684333407	18.306483611407604	0.9501748877547262	18.276375991965885	0.4645768873654178	20.196181346481936	1.1822508484823062	19.424533756192808	-0.6614689821345583	0.09255865944141517	2.6087406266427724	2.8366562681496026	-1.8434748086357862	2.8137757562425705	0.6017244043733618	13.646138488404759	-0.024396664558196692	4.215861780649524	2.68742635058894	3.2984233557068534	0.47754221388223905	18.245224831651555	1.5709872738514306	18.99278477807481	0.6593027174908184	15.088318638768563	-0.42822405548049214	14.654073539701681	0.21316159063243842	2.0135962015804663	-0.16434582640086925	1.7148369030003032	-0.44361128029594377	0.8533312038010525	-3.52760190472393	17.837171028016762	1.1709488288378618	18.3497222959001	-0.2242714317136722	17.27875498612818	0.35460841732170967	16.45723588495552	-0.9811218723276737	18.64407597826746	-1.2731125266912486	19.264983062575226	0.44048230097833974	18.496523412150765	0.09049456803849526	19.739992794052952	-1.122986270907848	2.1557216901003358	-0.9683240854980968	15.025511882835957	-2.280916842907663	14.617741286700856	-1.1667509629220545	18.608520157952896	-0.11573182833738593	19.023219030240707	0.385835761386415	18.458194092535912	-0.3432211977600867	15.626178994887338	-0.18240666310298376	3.473038677550629	-0.1121195311487061	2.974799209478685	-0.33585056722711926	9.090845876986421	2.5574618131915807	1.167732707391243	-2.080445778973356	2.3715970065014584	1.6637686296386593	0.6658161893236402	1.2711967427350488	0.1444519933086036	-0.7001052626974101	14.302097507950517	-0.40065789181335215	19.0274793088669	-2.1331812527927103	14.489627362673291	-1.6313942729285855	18.069278839860743	-1.009879658525847	13.328501829842004	-0.8040684869827426	14.228704170452849	-0.5046346285929693	13.782962075340919	-0.6995471575847662	18.58021591702585	0.6716119948357526	18.63005707012722	-1.314125386270907	7.559213642805902	2.170263870170938	18.1586423239388	0.28283119355792524	19.193044620318556	-0.9095839034275979	18.678990547036836	1.194913897254274	18.58058698046866	0.6577353485992743	15.45235950149225	-3.606087983131932	19.550355088154646	1.0010859441324929	17.90672660568525	0.32289342872590976	4.1750517590271405	-0.7201531090773162	7.84787290692551	0.6203880235337169	0.8864236582382878	-0.264018229274955	2.9605364696123964	1.5762689612036533	8.897094157058682	1.8777882978394898	13.892857544886299	-1.6886182527924716	14.53362796753196	-1.9761679969649104	1.8619088795499708	-1.6576409808280441	-0.8478719141542662	-0.7015956356387372	-0.4093760499272711	0.031479504639175745	8.863498744436967	0.390865283554404	5.274357669944246	0.7195899364974307	1.6245277058738148	-3.1424312823133795	19.176753607409996	1.2700214854690612\n258600000	1.105186801800067	1.360458019566063	10.21448820802518	1.7677178986228377	10.157156126487765	-0.043700162484103355	13.956100961727682	-0.9204611016261102	14.187213397103765	0.06494205641166928	0.9613808845843057	0.5535967494896469	0.2163378767741032	-0.41892469788087605	20.8796541972113	1.721461206871631	20.824236614141032	1.0007312555797356	20.320231541663123	1.33832231263823	22.68107618288192	1.970166371352425	0.15188277700684694	3.217147891333269	2.8931941056632224	-1.8955987663515996	3.1933737893270746	-0.8998069671013129	16.953773265761686	0.3182688545248293	4.9486843588793805	1.2835229539175943	3.8025692084675318	0.5474661016310975	20.690087541224525	1.146905854114235	21.31109693204979	1.0593054238758344	17.40650540636858	-0.2821579447037703	16.526521824795516	0.1970071306397953	1.3255983562799294	-0.5607719582837805	1.1667777228554197	-0.9425417002686458	2.1022187676563706	-4.272290698337972	20.022922165485177	2.0164195984217463	20.349204519045227	0.48271891454498583	19.518017444507212	0.33453088604988707	18.040687921466954	0.9772610865050264	19.940359113767943	-1.029090580315752	20.686959025744436	0.4547029772250046	21.701449642347086	-0.019816366361216725	20.87097027042743	-1.9376923530060595	2.507782642965874	-0.681124296311808	16.465189795568946	-0.615364534052976	16.282669368328087	-1.0927988503057506	20.3843506139116	0.31670108986468626	20.105136098285183	-0.2962186005271237	21.316219725051877	-0.6456763710016716	17.35353232719263	0.0953455006768513	2.9972279100631893	-1.3238278728387096	3.1228853321701857	-1.074408018406788	8.69323916273843	1.745015776130479	0.6466108363996766	0.8333652661702081	3.0234131989159243	1.2455111508056176	1.1733483739763078	2.499447306827783	1.1527035669936052	0.6001223363016563	16.367335662257993	-1.0549523557461078	20.27702154921294	-1.8190435816946646	16.145695924604453	-1.5920234860060296	20.287563996687098	-1.0859413493073173	15.615778845563991	1.1280555922851907	16.078092764007703	-0.5095317204056158	17.292384197451135	-0.7441495924702869	21.54265222842976	-0.7509173725254745	20.47104278330646	-0.8038119396081908	7.940630987223007	1.2362188985453362	20.127837535530514	1.219030326796836	19.733697806758844	0.031978307882551626	20.526271515094784	0.4830665549927906	22.13669689796265	0.23454499343368473	17.83951431027422	-3.573254142135823	21.369545508279913	0.3240975561154928	20.65086709886307	0.8615032501678388	4.193867025985185	-1.2273670893569009	7.934053328051796	0.021983974318650318	0.8801896106698802	0.2206640796809622	3.4085527455108036	1.6838940314811357	8.85465056113345	0.49625287457085293	16.246670607284784	-1.9619421184214962	17.530922464827576	-1.4539411743664685	1.088021374735435	0.5793489509120027	-0.12006107484455499	0.7884956137651852	-0.0024744500769269817	0.7294680700913654	7.0705260143893085	-0.48769676281670504	5.039706349109276	0.9840492486002292	1.016388321277029	-2.809193857511734	21.349065262512816	0.1604234240891595";
 			var start = function () {
                    this.ox = this.attr("x");
                    this.oy = this.attr("y");
                    this.animate({opacity: .8}, 500, ">");
                },
                move = function (dx, dy) {
                    this.attr({x: this.ox + dx, y: this.oy + dy});
                },
                up = function () {
                    this.animate({opacity: 1}, 500, ">");
                };

			var promptRename = function(){
				var ID=prompt("Rename ID to:");
				this.attr({text:ID});
			};


    // This will parse a delimited string into an array of
    // arrays. The default delimiter is the comma, but this
    // can be overriden in the second argument.
    function CSVToArray( strData, strDelimiter ){
    	// Check to see if the delimiter is defined. If not,
    	// then default to comma.
    	strDelimiter = (strDelimiter || ",");

    	// Create a regular expression to parse the CSV values.
    	var objPattern = new RegExp(
    		(
    			// Delimiters.
    			"(\\" + strDelimiter + "|\\r?\\n|\\r|^)" +

    			// Quoted fields.
    			"(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" +

    			// Standard fields.
    			"([^\"\\" + strDelimiter + "\\r\\n]*))"
    		),
    		"gi"
    		);


    	// Create an array to hold our data. Give the array
    	// a default empty first row.
    	var arrData = [[]];

    	// Create an array to hold our individual pattern
    	// matching groups.
    	var arrMatches = null;


    	// Keep looping over the regular expression matches
    	// until we can no longer find a match.
    	while (arrMatches = objPattern.exec( strData )){

    		// Get the delimiter that was found.
    		var strMatchedDelimiter = arrMatches[ 1 ];

    		// Check to see if the given delimiter has a length
    		// (is not the start of string) and if it matches
    		// field delimiter. If id does not, then we know
    		// that this delimiter is a row delimiter.
    		if (
    			strMatchedDelimiter.length &&
    			(strMatchedDelimiter != strDelimiter)
    			){

    			// Since we have reached a new row of data,
    			// add an empty row to our data array.
    			arrData.push( [] );

    		}


    		// Now that we have our delimiter out of the way,
    		// let's check to see which kind of value we
    		// captured (quoted or unquoted).
    		if (arrMatches[ 2 ]){

    			// We found a quoted value. When we capture
    			// this value, unescape any double quotes.
    			var strMatchedValue = arrMatches[ 2 ].replace(
    				new RegExp( "\"\"", "g" ),
    				"\""
    				);

    		} else {

    			// We found a non-quoted value.
    			var strMatchedValue = arrMatches[ 3 ];

    		}


    		// Now that we have our value string, let's add
    		// it to the data array.
    		arrData[ arrData.length - 1 ].push( strMatchedValue );
    	}

    	// Return the parsed data.
    	return( arrData );
    }

//for two dimensional
function kMeansClustering(arrayX, arrayY, k){
	
	
	var centroidsX = new Array(k);
	var centroidsY = new Array(k);
	var membership = new Array(arrayX.length);
	
	
	 
	//initial assignment
	var initialIndex = new Array(k);
    var i=0;
	while(i < k){	
	 var index = Math.floor(arrayX.length*Math.random());
	 var newIndex = 1;
	 for(var l=0; l < i; l++ ){
	 	if(index == initialIndex[l]){
			newIndex = 0;
		}
	 }
	 if(newIndex){
		centroidsX[i] = arrayX[index];  //now it should be two dimensional
		centroidsY[i] = arrayY[index];  //now it should be two dimensional
		initialIndex[i] = index;
		i++;
	 }
	}
	
	
	for (var step = 0; step < 10; step++) {
	
		//asignment step
		for (var j = 0; j < arrayX.length; j++) {
			var minDist = calculateDistance(arrayX[j], arrayY[j], centroidsX[0], centroidsY[0]);
			var minDistCluster = 0;
			for (var i = 1; i < k; i++) {
				var curDistance = calculateDistance(arrayX[j], arrayY[j], centroidsX[i], centroidsY[i]);
				if (minDist > curDistance) {
					minDist = curDistance;
					minDistCluster = i;
				}
			}
			membership[j] = minDistCluster;
		}
		
		//alert(membership);
		//update centroid
		
		
		var numMembers = new Array(k);

		for (var i = 0; i < k; i++) {
			centroidsX[i] = 0;
			centroidsY[i] = 0;
			numMembers[i] = 0;
		}
		
			for (var j = 0; j < arrayX.length; j++) {
				var i = membership[j];
				numMembers[i] = numMembers[i] + 1;
				centroidsX[i] = centroidsX[i] + arrayX[j];
				centroidsY[i] = centroidsY[i] + arrayY[j];
			}
		for (var i = 0; i < k; i++) {
			centroidsX[i] = centroidsX[i] / numMembers[i];
			centroidsY[i] = centroidsY[i] / numMembers[i];
		}
			//alert(centroidsX);
		
		
	}//end step	
	
	//alert(membership);
	//alert("done");
	
	return(membership);
	
}


function findMax(array)
{
	
var max = array[0];
for(var x=1; x<array.length; x++){
	//alert(array[x]);
	if(array[x] > max){
		max = array[x];
		//alert(max);
	}
}
//alert("The max is " + max);
//alert(max);
return(max);
}


function findMin(array)
{
	
var min = array[0];
for(var x=1; x<array.length; x++){
	if(array[x] < min){
		min = array[x];
	}
}
//alert("The min is " + min);
return(min);
}



function computeMedian(values){
	/*
	array.sort();
	alert(array.length);
	alert(array.length/2);
	alert(Math.floor(array.length/2));
	return(array.sort()[Math.floor(array.length/2))]);
	*/
	//from: https://gist.github.com/caseyjustus/1166258
	values.sort( function(a,b) {return a - b;} );
    var half = Math.floor(values.length/2);
    if(values.length % 2)
        return values[half];
    else
        return (values[half-1] + values[half]) / 2.0;
}


Raphael.st.draggable = function() {
  var me = this,
      lx = 0,
      ly = 0,
      ox = 0,
      oy = 0,
      moveFnc = function(dx, dy) {
          lx = dx + ox;
          ly = dy + oy;
          me.transform('t' + lx + ',' + ly);
      },
      startFnc = function() {},
      endFnc = function() {
          ox = lx;
          oy = ly;
      };
  
  this.drag(moveFnc, startFnc, endFnc);
};



function savesvg(){
	
	
  

	
	
    var canvas_=document.getElementById("canvas");
    var text = (new XMLSerializer()).serializeToString(canvas_);
    var encodedText = encodeURIComponent(text);
   open("data:image/svg+xml," + encodedText);

}



function createSVGNewWindow()
{
	
	
		//alert("Saving a SVG image to a new window."); //I added
var canvas_=document.getElementById("drawing_board");
var text = (new XMLSerializer()).serializeToString(canvas_);
//alert(text);
	
	//perform trimming to get rid of the <div ...> </div ..>
var n = text.search(">");
//alert(n);
	
var n2 = text.lastIndexOf("<");
// alert(n2);	
 
 var imageText = text.substring(n+1,n2);
   
    var encodedText = encodeURIComponent(imageText);
   // var encodedText = encodeURIComponent(text);
   open("data:image/svg+xml," + encodedText);   //THis doesn't work in Internet explorer..
   

}


function calculateDistance(obj1_x, obj1_y, obj2_x, obj2_y){
		return(Math.sqrt(Math.pow(obj1_x-obj2_x,2) + Math.pow(obj1_y-obj2_y,2)));
}

function parseTime(array){
 var year = new Array(array.length-1);
 for(var i=1; i < array.length; i++){
  year[i-1] = Number(array[i].substring(array[i].lastIndexOf("/")+1 , array[i].length-1));
 }
 return(year);
}




var one_x = null;
var one_y = null;
var one_ori_x = null;
var one_ori_y = null;
function selectPointD(){
 var ID = this.selectedIndex;
 one_x = circle[ID].attr('cx');
 one_y = circle[ID].attr('cy');
 
 one_ori_x = x_virus[ID];
 //alert(one_ori_x);
 one_ori_y = y_virus[ID];
 //alert(one_x);
 if(one_x != null && one_y != null && two_x != null && two_y != null){
  
     var d_x = two_x-one_x ;
	 var d_y = two_y - one_y;
     var pathString = "M " + one_x + " " + one_y + " l " + d_x +" " +  d_y; //doesn't work now
   // alert(pathString);
   var line = paper.path(pathString);
   	line.attr("stroke-width", "2");

    alert("Antigenic distance = " + calculateDistance(one_ori_x,one_ori_y, two_ori_x, two_ori_y).toPrecision(4));
	line.hide();
 }
 //draw a line:
}



var two_x = null;
var two_y = null;
var two_ori_x = null;
var two_ori_y = null;
function selectPointSerumD(){
 var ID = this.selectedIndex;
 two_x = squareSera[ID].attr('x') + radius;
 two_y = squareSera[ID].attr('y') + radius;
 two_ori_x = x_serum[ID];
 two_ori_y = y_serum[ID];

 var neighborhood_radius = 1;
 
 var drawCircle = paper.circle(two_x, two_y, 1*spreadFactor).attr({ fill: '#FF0000', stroke: '#FF0000', 'stroke-width': 0 , opacity:0.2});
 drawCircle.toBack();
 //http://stackoverflow.com/questions/13768213/raphael-make-object-not-receive-events
 //check neighborhood
 var neighborhoodList = "viruses within neighborhood:\n";
 for(var i=0; i < numViruses; i++){
 	var d=calculateDistance(x_virus[i],y_virus[i], two_ori_x, two_ori_y);
	if(d < neighborhood_radius){
		neighborhoodList = neighborhoodList + data[0][1+i*2] + "\n";
	}
 }
 alert(neighborhoodList);
 
 //alert(two_x);
 if(one_x != null && one_y != null && two_x != null && two_y != null){
 	//alert(calculateDistance(one_x,one_y, two_x, two_y));

var d_x = two_x-one_x ;
var d_y = two_y - one_y;
 var pathString = "M " + one_x + " " + one_y + " l " + d_x +" " +  d_y; //doesn't work now
  var line = paper.path(pathString);
     	line.attr("stroke-width", "2");
  	 alert("Antigenic distance = " + calculateDistance(one_ori_x,one_ori_y, two_ori_x, two_ori_y).toPrecision(4));
 //alert(pathString);
	line.hide();
 }
 
 
 
}

//Question. how to communicate with the element in paper?
function selectPoint(){
//alert(this.id + " - " + this.selectedIndex);
//    var circle = paper.circle(320, 240, 90).attr({ fill: '#3D6AA2', stroke: '#000000', 'stroke-width': 8 });
 
 var ID = this.selectedIndex;
if (text[ID] == null) {

	//to highlight, I also want to redraw the dot...
	//circle[ID].hide();
	var cir_x = circle[ID].attr('cx');
	var cir_y = circle[ID].attr('cy');
	var cir_r = circle[ID].attr('r');	
	var cir_opa = circle[ID].attr("fill-opacity");
	var cir_title = circle[ID].attr("title");
	
	
	var anim = Raphael.animation({r: cir_r*3, "fill-opacity":0.25}, 300);
	circle[ID].animate(anim);
	var anim2 = Raphael.animation({r: cir_r, "fill-opacity":cir_opa}, 600);
	circle[ID].animate(anim2.delay(300));

	circle[ID].toFront();
	
	if(isCircleColorAnnotated ==0){
	circle[ID].attr({fill: AnnotationColor});//don't change the color to read
	}
 	//text[ID] = paper.text(cir_x - 5, cir_y - 10, data[0][1 + 2 * cir_title] ).attr({'font-size': 12,fill: '#003300', cursor: 'pointer'});
 	text[ID] = paper.text(cir_x - 5, cir_y - 10, virusName[cir_title] ).attr({'font-size': textSizeLabel,fill: '#003300', cursor: 'pointer'});
	text[ID].drag(move, start, up);
	text[ID].dblclick(promptRename);
	//
}




}



function selectPointSera(){
	
//alert(this.id + " - " + this.selectedIndex);
//    var circle = paper.circle(320, 240, 90).attr({ fill: '#3D6AA2', stroke: '#000000', 'stroke-width': 8 });
 
 var ID = this.selectedIndex;
 if (textSera[ID] == null) {

	//to highlight, I also want to redraw the dot...
	//circle[ID].hide();
	var cir_x = squareSera[ID].attr('x');

	var cir_y = squareSera[ID].attr('y');
	var cir_r = squareSera[ID].attr('width');	
	var cir_opa = squareSera[ID].attr("fill-opacity");
	var cir_title = squareSera[ID].attr("title");

	var anim = Raphael.animation({x:cir_x-cir_r*3/2, y:cir_y-cir_r*3/2, width: cir_r*3, height: cir_r*3, "fill-opacity":0.25}, 300);
	squareSera[ID].animate(anim);
	var anim2 = Raphael.animation({x:cir_x, y:cir_y, width: cir_r, height:cir_r, "fill-opacity":cir_opa}, 600);
	squareSera[ID].animate(anim2.delay(300));

	squareSera[ID].toFront();
	squareSera[ID].attr({fill: '#FF0000'});

 	//textSera[ID] = paper.text(cir_x - 5, cir_y - 5, seraData[0][1 + 2 * cir_title] ).attr({'font-size': 12,fill: '#003300', cursor: 'pointer'});
 	textSera[ID] = paper.text(cir_x - 5, cir_y - 5, serumName[cir_title] ).attr({'font-size': textSizeLabel,fill: '#003300', cursor: 'pointer'});
	textSera[ID].drag(move, start, up);
	textSera[ID].dblclick(promptRename);
	//
}



}


var max_cluster_label=0;
var nElements;

function selectPointCurrentSample(cSample){
	var dataRow = cSample +1;
	var virus_xpos = new Array();
 	var virus_ypos = new Array();


//	alert(dataRow);
	
	//code to update the plot  (new coordinates and text attached to it)

if(virusLoaded){
	var x_coord = new Array(numViruses);
	var y_coord = new Array(numViruses);
	
    for (var i = 0; i < numViruses; i++) {
      x_coord[i] =  Number(data[dataRow][2*i+1]);
	   x_coord[i] = x_off + x_coord[i]; //add offset

	  y_coord[i] =  Number(data[dataRow][2*i+2]);
	   y_coord[i] = y_off + y_coord[i];	 //add offset
    }


  
//alert(numViruses);
	for(var ID=0; ID < numViruses; ID++){
	  var xpos = x_offset +x_coord[ID]*spreadFactor;
	  var ypos =  plotHeight - y_offset - y_coord[ID]*spreadFactor;
  		virus_xpos[ID] = xpos;
		virus_ypos[ID] = ypos;

	 //var anim = Raphael.animation({cx:100 , cy:100 }, 300);
	 //var anim = Raphael.animation({cx:xpos , cy:ypos }, 300);
	 var anim = Raphael.animation({cx:xpos , cy:ypos }, 300);
	 circle[ID].animate(anim);
	}

	for(var ID=0; ID < numViruses; ID++){
	 if (text[ID] != null) {
		var xpos = x_offset + x_coord[ID] * spreadFactor;
		var ypos = plotHeight - y_offset - y_coord[ID] * spreadFactor;
		var anim = Raphael.animation({
			x: xpos - 5,
			y: ypos -10
		}, 300);
		text[ID].animate(anim);
	 }		
	}

 

}


	
if(serumLoaded){
//assume the first column matches
//sera
	var x_coord = new Array(numSera);
	var y_coord = new Array(numSera);

    for (var i = 0; i < numSera; i++) {
      x_coord[i] =  Number(seraData[dataRow][2*i+1]);
	  y_coord[i] =  Number(seraData[dataRow][2*i+2]);
    }


//add offset for now
for(var i=0; i<numSera; i++){
 x_coord[i] = x_off + x_coord[i];
 y_coord[i] = y_off + y_coord[i];	
}

//update sera presence
for(var i=0; i < numSera; i++){
if(isNaN(x_coord[i]) || isNaN(y_coord[i])){
	isSerumNaN[i] = 1;
}
else{
	isSerumNaN[i] = 0;
}
}


    for (var i = 0; i < numSera; i++) {
    	if(isSerumNaN[i]){
		  squareSera[i].hide();
		  }
		  else{
		  	squareSera[i].show();
		  }
	}

	for(var ID=0; ID < numSera; ID++){

	  var xpos = x_offset +x_coord[ID]*spreadFactor - radius;
	  var ypos =  plotHeight - y_offset - y_coord[ID]*spreadFactor - radius;
	  
	  
	 //var anim = Raphael.animation({cx:100 , cy:100 }, 300);
	 var anim = Raphael.animation({x:xpos , y:ypos }, 300);
	 
	 squareSera[ID].animate(anim);

	 if (textSera[ID] != null) {
		var xpos = x_offset + x_coord[ID] * spreadFactor;
		var ypos = plotHeight - y_offset - y_coord[ID] * spreadFactor;
		var anim = Raphael.animation({
			x: xpos - 5,
			y: ypos -5
		}, 300);
		textSera[ID].animate(anim);
	 }

	 	
	 	 		
	}
}//serum laoded

if(load_ddCRPLog){

	var groupSize = new Array();
	for(var c=0; c< numViruses; c++){
	  groupSize[c] = 0;
	}

	for(var c=0; c < numViruses; c++){
		groupSize[   parseInt(ddCRPLogData[dataRow][c+2]) ] = groupSize[parseInt(ddCRPLogData[dataRow][c+2]) ] +1;
	}

//alert("hi");

 for(var c=0; c< numViruses; c++){
 	circle[c].toFront();
// 	circle[c].attr({stroke: colorClusterStroke[ parseInt(ddCRPLogData[dataRow][c+2])], fill: colorCluster[ parseInt(ddCRPLogData[dataRow][c+2])]});

//scaled by the number of points in the cluster:
	//  var curRadius = groupSize[parseInt(ddCRPLogData[dataRow][c+2]) ]/numViruses *100; //scale by radius
	var curRadius =  Math.sqrt(   groupSize[parseInt(ddCRPLogData[dataRow][c+2]) ]/numViruses / Math.PI) *80;   //scale by area
 	circle[c].attr({r: curRadius, stroke: colorClusterStroke[ parseInt(ddCRPLogData[dataRow][c+2])], fill: colorCluster[ parseInt(ddCRPLogData[dataRow][c+2])]});
 }
}


//var oldNumClusters = num_clusters;
//var oldNumClusters = max_cluster_label;
var oldNumClusters = 100;
if(load_cluster_path){
	
	//alert(oldNumClusters);
	//remove old path
	if(clusterPathLine != null){
//		for(var i=1; i <= oldNumClusters; i++){
		for(var i=1; i <= 100; i++){
	//		alert(nElements[i]);
	//		if(nElements[i] > 0){
				clusterPathLine[i].hide();
	//		}
		}
		clusterPathLine = null;
	}
	cluster_centroid_x = null;
	cluster_centroid_y = null;
	
//put viruses into string lists
	var cluster_members = new Array();
	for(var i=0; i< numViruses; i++){
		cluster_members[i] = "";	
	}
	

//alert(	parseInt(ddCRPLogData[dataRow][0]));	
//alert(	parseInt(ddCRPLogData[dataRow][0+1]));	
//alert(	parseInt(ddCRPLogData[dataRow][0+2]));
//alert(	parseInt(ddCRPLogData[dataRow][0+3]));
	
	for(var c=0; c< numViruses; c++){
		cluster_members[ parseInt(ddCRPLogData[dataRow][c+2]) ] = cluster_members[ parseInt(ddCRPLogData[dataRow][c+2]) ] +  c + "\t" ; 
	}
	
	//alert(cluster_members[0]);
	//alert(cluster_members[20]);
//alert(cluster_members[21]);
//alert(cluster_members[22]);

	num_clusters = 0;
	var clusterLabel = new Array();
	cluster_centroid_x = new Array();
	cluster_centroid_y = new Array();
	
	
	//calculate cluster mean in each cluster
//	for(var c=0; c< numViruses; c++){
// 		if( cluster_members[c] != ""){
// 			clusterLabel[num_clusters] = c;
// 			num_clusters++;			
// 		} 
// 	}

	max_cluster_label = 0;
	for(var c=0; c < numViruses; c++){
		if(max_cluster_label <  parseInt(ddCRPLogData[dataRow][c+2]) ){
			max_cluster_label =  parseInt(ddCRPLogData[dataRow][c+2]);
		
		}
	
	}
	//alert(max_cluster_label); 	
 	
 	//alert(clusterLabel);
// 	for(var c=0; c< num_clusters; c++){
 	for(var c=0; c<= max_cluster_label; c++){
 		cluster_centroid_x[c] = 0;
 		cluster_centroid_y[c] = 0;
 	}


	nElements = new Array();

	for(var c=0; c<= max_cluster_label; c++){ 
	//for(var c=0; c< num_clusters; c++){ 
		//alert(cluster_members[ c ]);
 		if( cluster_members[c] != ""){
			//alert(cluster_members[ clusterLabel[c] ]);
 			//var members = CSVToArray( cluster_members[ clusterLabel[c] ] , "\t");
 			var members = CSVToArray( cluster_members[ c ] , "\t");
 			//alert(c);
 			var numElements = members[0].length - 1;
 			nElements[c] = numElements;
 			//alert( numElements);
 			for(var j=0; j < numElements; j++){
 				var virusIndex = parseInt(members[0][j]);
 				//alert(virusIndex);
 				//cluster_centroid_x[c] += circle[virusIndex].attr('cx'); //in theory it should work, but because of the delay, the attribute doesn't get updated in time
 				//cluster_centroid_y[c] += circle[virusIndex].attr('cy');
 				cluster_centroid_x[c] += virus_xpos[virusIndex];
 				cluster_centroid_y[c] += virus_ypos[virusIndex];
 			}
 			cluster_centroid_x[c] = cluster_centroid_x[c]/numElements;
 			cluster_centroid_y[c] = cluster_centroid_y[c]/numElements; 
 		
 		}
 		else{
 			nElements[c] = 0;
 		}
	}
//alert("hi");
//alert(nElements);
	clusterPathLine = new Array();
	//connect the paths
	//alert(num_clusters);
	//for(var c=1; c<num_clusters; c++){
//	for(var c=1; c<= max_cluster_label; c++){
//alert(nElements);
	for(var c=1; c<= 100; c++){
		var c2 = parseInt(clusterPathData[dataRow][c+1]);
		
		if( nElements[c] >0 && nElements[c2]>0){
//		alert(c + " and " + c2);
			clusterPathLine[c] = paper.path("M " + cluster_centroid_x[c] + " " + cluster_centroid_y[c] + " L " + cluster_centroid_x[c2] + " " + cluster_centroid_y[c2]).attr( {		stroke: '#3399FF',		'stroke-width':2,		'opacity': 0.8	});
			//clusterPathLine[c].show();
		}
		else{
			clusterPathLine[c] = paper.path("M 0 0 L 0 0").attr( {		stroke: '#3399FF',		'stroke-width':2,		'opacity': 0.8	});
			clusterPathLine[c].hide();
		}
	}
	
	

	
	
}


if(load_mutations){
	if(driverMutations_labels != null ){
		for(var c=1; c< oldNumClusters; c++){
			driverMutations_labels[c].hide();
		}
		driverMutations_labels = null;
	}
	
	
	driverMutations_labels = new Array();
	for(var c=1; c<num_clusters; c++){
		var c2 = parseInt(clusterPathData[dataRow][c+1]);
		var mid_x = (cluster_centroid_x[c2] +cluster_centroid_x[c])/2 ;  
		var mid_y = (cluster_centroid_y[c2] +cluster_centroid_y[c])/2;
		driverMutations_labels[c] = paper.text(mid_x, mid_y, (parseInt(mutationsData[dataRow][c+1])+"")).attr({ 'font-size': 12, fill: '#000000', cursor: 'pointer' });
	}
	
	//alert("hi");
}



}


var zoomLevel = 0;

function ZoomIn(){
				if( zoomLevel <9){
	            //if(panZoom.getCurrentZoom()<9){
                panZoom.zoomIn(1);
                console.log('current zoom after zoom in : '+panZoom.getCurrentZoom());
                zoomLevel++;
                //rows_or_sections_display();
            }
            
            if(zoomLevel == 9){
           		document.getElementById("button_Zoomin").style.background='#B2CBE6'; 
           	}
           	
           	if(zoomLevel > 0){
           		document.getElementById("button_Zoomout").style.background='#0074CC'; 
           	}
           	
            
	//paper.setViewBox(200, 200, 400, 400, false);

}

function ZoomOut(){
	 if( zoomLevel>0){
           // if(panZoom.getCurrentZoom()>0){
                panZoom.zoomOut(1);
                console.log('current zoom after zoom out : '+panZoom.getCurrentZoom());
                event.preventDefault();
                zoomLevel--;
                //rows_or_sections_display();
            }
            
      if(zoomLevel < 9){
			document.getElementById("button_Zoomin").style.background='#0074CC';
      }
      if(zoomLevel ==0){
			document.getElementById("button_Zoomout").style.background='#B2CBE6';
      }      
}

function MCMCselectPoint(){
	currentSample = this.selectedIndex;
	 selectPointCurrentSample(currentSample);	
	
}

function MCMC_MaxPosterior(){
	if(loadedMdsLog && virusLoaded){
		alert("Sample: " +  MdsLogData[maxSampleIndex+1][0] +" has the maximum posterior.");
		 currentSample = maxSampleIndex;
  		 selectPointCurrentSample(currentSample);	
	}
	else{
		alert("At least one of the virus location and the MDS log files are not loaded yet");
	}
}


function MCMC_median(){

	var x_coord_median = new Array(numViruses);
	var y_coord_median = new Array(numViruses);
	
	for(var i=0; i < numViruses; i++){
		
		var numSamples = data.length-1;
		var xSamples = new Array(numSamples);
		var ySamples = new Array(numSamples);
		for(var j=0; j< numSamples;j++){
			xSamples[j] = Number(data[j+1][2*i+1]);
			ySamples[j] = Number(data[j+1][2*i+2]);
		}
		x_coord_median[i] = computeMedian(xSamples);
		y_coord_median[i] = computeMedian(ySamples);
	}
	
	
	x_virus = x_coord_median;
	y_virus = x_coord_median;
	
	
	
//displacement
    for (var i = 0; i < numViruses; i++) {
	   x_coord_median[i] = x_off + x_coord_median[i]; //add offset
	   y_coord_median[i] = y_off + y_coord_median[i];	 //add offset
    }
	
	

	for(var ID=0; ID < numViruses; ID++){
	  var xpos = x_offset +x_coord_median[ID]*spreadFactor;
	  var ypos =  plotHeight - y_offset - y_coord_median[ID]*spreadFactor;
	 //var anim = Raphael.animation({cx:100 , cy:100 }, 300);
	 var anim = Raphael.animation({cx:xpos , cy:ypos }, 300);
	 circle[ID].animate(anim);
	}

	for(var ID=0; ID < numViruses; ID++){
	 if (text[ID] != null) {
		var xpos = x_offset + x_coord_median[ID] * spreadFactor;
		var ypos = plotHeight - y_offset - y_coord_median[ID] * spreadFactor;
		var anim = Raphael.animation({
			x: xpos - 5,
			y: ypos -10
		}, 300);
		text[ID].animate(anim);
	 }		
	}
	
	
	//sera
	var x_coord_median = new Array(numViruses);
	var y_coord_median = new Array(numViruses);
	
	for(var i=0; i < numSera; i++){
		
		//var numSamples = data.length-1; //assume to be the same as above
		var xSamples = new Array(numSamples);
		var ySamples = new Array(numSamples);
		for(var j=0; j< numSamples;j++){
			xSamples[j] = Number(seraData[j+1][2*i+1]);
			ySamples[j] = Number(seraData[j+1][2*i+2]);
		}
		x_coord_median[i] = computeMedian(xSamples);
		y_coord_median[i] = computeMedian(ySamples);
	}
	
	x_serum = x_coord_median;
	y_serum = x_coord_median;
	
//displacement
    for (var i = 0; i < numSera; i++) {
	   x_coord_median[i] = x_off + x_coord_median[i]; //add offset
	   y_coord_median[i] = y_off + y_coord_median[i];	 //add offset
    }
	
	

	for(var ID=0; ID < numSera; ID++){
	  var xpos = x_offset +x_coord_median[ID]*spreadFactor;
	  var ypos =  plotHeight - y_offset - y_coord_median[ID]*spreadFactor;
	 //var anim = Raphael.animation({cx:100 , cy:100 }, 300);
	 var anim = Raphael.animation({x:xpos , y:ypos }, 300);
	 squareSera[ID].animate(anim);
	}

	for(var ID=0; ID < numViruses; ID++){
	 if (textSera[ID] != null) {
		var xpos = x_offset + x_coord_median[ID] * spreadFactor;
		var ypos = plotHeight - y_offset - y_coord_median[ID] * spreadFactor;
		var anim = Raphael.animation({
			x: xpos - 5,
			y: ypos -5
		}, 300);
		textSera[ID].animate(anim);
	 }		
	}
		
}


var isCircleColorAnnotated = 0;
var virusLoaded = 0;
var serumLoaded = 0;
//global objects
var paper;
var circle;
var newVariationCircle;
var newVariationCircleIsTriggered;
var text;
var data;
var radius = 3;
var numViruses;
var CI_pairwise;
var CI_pairwise_legend;


var x_offset = 30;
var y_offset = 30;
var spreadFactor;
var plotHeight = 800;
var plotWidth = 800;
//var x_off = 2;
//var y_off = 2;
var x_off;
var y_off;


var noAnnotationColor = "#FFFFFF";
var AnnotationColor = "#FF0000";

function changeRadiusFunction(){
	
	
	var old_r = Number(radius);
  	var new_r=prompt("Change radius of the points to # pixels? (e.g. 5)");

	if(isNaN(new_r) || new_r <= 0){
		alert("You didn't enter the radius. Radius reset to 5.");
		new_r = 5;
	}
	
	
	radius = Number(new_r);
	
	
	
	if(virusLoaded){
	//need to update drawing or clear drawing... now is not good.
	for(var ID=0; ID < numViruses; ID++){
	 //var anim = Raphael.animation({cx:100 , cy:100 }, 300);
	 var anim = Raphael.animation({r:radius}, 300);
	 circle[ID].animate(anim);
	 }
	}


	//just change viruses, not sera ..
	/*
	
	if(serumLoaded){ 
	 for(var ID=0; ID < numSera; ID++){
	 var ori_xpos= squareSera[ID].attr('x') +old_r ;
	 var ori_ypos= squareSera[ID].attr('y') +old_r ;
  //squareSera[i] = paper.rect(xpos+radius, ypos+radius, radius*2, radius*2).attr({ stroke: '#660066', fill: '#FFFFFF', 'stroke-width': 2, title:i , "fill-opacity": 1});
	  var anim = Raphael.animation({x:ori_xpos-radius, y:ori_ypos-radius, width:radius*2, height:radius*2}, 300);
	  squareSera[ID].animate(anim); 	 
	  }
	}
	*/

}


function changeTextSizeFunction(){
	
  	var new_size=prompt("Change radius of the points to # pixels? (e.g. 10)");
	textSizeLabel = Number(new_size);
		
	if(isNaN(textSizeLabel) || textSizeLabel <= 0){
		alert("You didn't enter the text size. Text size reset to 12.");
		textSizeLabel = 12;
	}
}





var serumName;

var squareSera;
var textSera;
var numSera;
var seraData;

var x_serum;
var y_serum;

var isSerumNaN;
	
function addSera(dataStr, readDataType){
	
	serumLoaded = 1;
	
	 seraData = CSVToArray( dataStr , "\t");
	 numSera = (seraData[0].length -1)/2;
	// alert(numSera);
	//alert(numViruses);



	
//the data has an offset of 1..
//first line= header, subsequent lines = data

for(var k=0; k < numSamples; k++){


if(isAlign){		
//apply alignment
for (var i = 0; i < numSera; i++) {
			seraData[k+1][2*i+1] = Number(seraData[k+1][2 * i + 1]) - m_x[k];//changing seraData, not t_seraData
			seraData[k+1][2*i+2] = Number(seraData[k+1][2 * i + 2]) - m_y[k]; //changing seraData, not t_seraData
		}
}		
	
if(isFlip){	
//apply flip		
  if(flip_samples[k]==1){
   //flip horizontally
    for (var i = 0; i < numSera; i++) {
		seraData[k+1][2*i+1] = -seraData[k+1][2*i+1];
	}
  }
}  
 
if(isRotate){ 
  //apply rotation
  for (var i = 0; i < numSera; i++) {
		var new_x, new_y;
		 new_x =  seraData[k+1][2*i+1]*Math.cos(theta_samples[k]) + seraData[k+1][2*i+2]*Math.sin(theta_samples[k]);   
		 new_y = -seraData[k+1][2*i+1]*Math.sin(theta_samples[k]) + seraData[k+1][2*i+2]*Math.cos(theta_samples[k]);
		seraData[k+1][2*i+1] = new_x;
		seraData[k+1][2*i+2] = new_y;
	}
}		
		
}//for each sample
	
	


	
	
	var x_coord = new Array(numSera);
	var y_coord = new Array(numSera);
	
    for (var i = 0; i < numSera; i++) {
      x_coord[i] =  Number(seraData[currentSample+1][2*i+1]);
	  y_coord[i] =  Number(seraData[currentSample+1][2*i+2]);
    }
 	
	x_serum = x_coord;
	y_serum = y_coord;
	
//alert("hi");
//add offset for now
for(var i=0; i<numSera; i++){
 x_coord[i] = x_off + x_coord[i];
 y_coord[i] = y_off + y_coord[i];	
}


squareSera = new Array(numSera);
textSera = new Array(numSera);
CI_pairwise_legend = new Array(numSera);

isSerumNaN = new Array(numSera);

for(var i=0; i < numSera; i++){
	if(isNaN(x_coord[i]) || isNaN(y_coord[i])){
	  isSerumNaN[i] = 1;
	 }
	 else{
	 	isSerumNaN[i] = 0;
	 }
}

var opacityFirst = 0.4;
var opacityLast = 1;
for(var i=0; i< numSera; i++){
	
  //var opacityValue = (opacityLast - opacityFirst)*i/numViruses + opacityFirst;
  //opacity value set to 0
 
  var xpos_begin = x_offset +x_coord[i]*spreadFactor  - radius;  //the begin x
  var ypos_begin =  plotHeight - y_offset - y_coord[i]*spreadFactor -radius; //the begin y

	if(isSerumNaN[i]){
	 xpos_begin = 0;
	 ypos_begin = 0;	
	}

   //squareSera[i] = paper.circle(xpos, ypos, radius+2).attr({ stroke: '#660066', fill: '#FFFFFF', 'stroke-width': 2, title:i , "fill-opacity": 1});

//old sera color
//  squareSera[i] = paper.rect(xpos_begin, ypos_begin, radius*2, radius*2).attr({ stroke: '#660066', fill: '#FFFFFF', 'stroke-width': 2, title:i , "fill-opacity": 1});  

//new sera color
squareSera[i] = paper.rect(xpos_begin, ypos_begin, radius*2, radius*2).attr({ stroke: '#D1C2B2', fill: '#FFFFFF', 'stroke-width': 1, title:i , "fill-opacity": 1});  


 	if(isSerumNaN[i]){
 		squareSera[i].hide();
 	}
 //  //squareSera[i] = paper.circle(x_offset + Math.floor(x_coord[i]*spreadFactor), y_offset+(370-Math.floor(y_coord[i]*spreadFactor)), radius).attr({ stroke: '#3D6AA2', fill: '#0066FF', 'stroke-width': 2 });	
  ////  var dot = paper.circle(x_offset + Math.floor(x_coord[i]), y_offset+Math.floor(y_coord[i]), radius).attr({ fill: '#3D6AA2', stroke: '#000000', 'stroke-width': 8 });	
}


serumName = new Array(numSera);

for(var i=0; i < numSera; i++){
  serumName[i] = seraData[0][1 + 2 * i].substring(0, seraData[0][1 + 2 * i].length - 1);
}



for (var i = 0; i < numSera; i++) {
 
 	squareSera[i].click(function(){
		this.attr({fill: '#FF0000'});
		this.toFront();
		//text.attr({text:dynamicText, x:280});
		//var text2 = paper.text(280, 280, "Clicked!").attr({			'font-size': 25,			fill: '#009933'		});
		//alert(this.attr('cx'));
		var objectID = Number(this.attr('title'));
		//alert(objectID);
		 if(textSera[objectID]==null){
			//textSera[objectID] = paper.text(this.attr('x')-5, this.attr('y')-5, seraData[0][1+2*this.attr('title')]).attr({			'font-size': 12,			fill: '#003300', cursor: 'pointer'	});
			textSera[objectID] = paper.text(this.attr('x')-5, this.attr('y')-5, serumName[this.attr('title')]).attr({			'font-size': textSizeLabel,			fill: '#003300', cursor: 'pointer'	});
			//originally move start up functions declared here
            textSera[objectID].drag(move, start, up);
			//originally promptRename declared here
			textSera[objectID].dblclick(promptRename);

			}
			else{
				this.attr({fill: '#FFFFFF'})  //revert back to the original color
				textSera[objectID].hide();
				textSera[objectID] = null;
			}
			//alert(text2[this.attr('title')].status());
			//text2[this.attr('title')].show();
			
			//text2[this.attr('title')].hide();
			
	});
	squareSera[i].hover(function(){
		
		this.toFront();
		var objectID = Number(this.attr('title'));

		if(readDataType ==1){		
			for(var curObject = 0; curObject < numViruses; curObject++){
			var pairwiseDistance = new Array(numSamples);
	  		 for(var k=0; k<numSamples; k++){	
	  		 	 pairwiseDistance[k] =  Math.sqrt( Math.pow( (Number(seraData[k+1][2 * objectID + 1]) - Number(data[k+1][2 * curObject + 1])), 2)     
	  		 	                                 + Math.pow( (Number(seraData[k+1][2 * objectID + 2]) - Number(data[k+1][2 * curObject + 2])), 2) );
					  		 	
	  		 }
 	    	var pivot_x = this.attr('x') +  radius; //need to add the radius offset back to get the center of the square
	 	    var pivot_y = this.attr('y') + radius;  //need to add the radius offset back to get the center of the square

			var pt_x = circle[curObject].attr('cx');
	 	    var pt_y = circle[curObject].attr('cy');

			var slope = (pt_y - pivot_y)/ (pt_x -pivot_x);
			//alert(slope);
			///  (Number(data[k+1][2 * objectID + 1]) - Number(data[k+1][2 * curObject + 1]))
			var change_x_0_1 = quantile(pairwiseDistance, 0.1)/ Math.sqrt(  1 + Math.pow(slope,2) ) ;
			var change_y_0_1 = quantile(pairwiseDistance, 0.1) / Math.sqrt(  1 + Math.pow(slope,2) ) *slope ;
			
			var dist = Math.sqrt( Math.pow(((pt_y - pivot_y)/spreadFactor) ,2) + Math.pow( ((pt_x -pivot_x)/spreadFactor), 2) );
			
			change_x_0_1 = change_x_0_1 * spreadFactor;
			change_y_0_1 = change_y_0_1 * spreadFactor;

			//needs to attach direction of change		
			if( pivot_x > pt_x){
				change_x_0_1 = -change_x_0_1;
				change_y_0_1 = - change_y_0_1; 
			}
			
			var change_x_0_9 = quantile(pairwiseDistance, 0.9)/ Math.sqrt(  1 + Math.pow(slope,2) ) ;
			var change_y_0_9 = quantile(pairwiseDistance, 0.9) / Math.sqrt(  1 + Math.pow(slope,2) ) *slope ;
			
			change_x_0_9 = change_x_0_9 * spreadFactor;
			change_y_0_9 = change_y_0_9 * spreadFactor;
		
			if( pivot_x > pt_x){
				change_x_0_9 = -change_x_0_9; 
				change_y_0_9 = - change_y_0_9;
			}
			
			
			
			var x_0_1 = pivot_x + change_x_0_1;
			var y_0_1 = pivot_y + change_y_0_1;
			
			var x_0_9 = pivot_x + change_x_0_9;
			var y_0_9 = pivot_y + change_y_0_9;
			
			var diff_x = x_0_9 - x_0_1;
			var diff_y = y_0_9 - y_0_1;
			var curObject_fillColor = circle[curObject].attr('fill');
			
			if(curObject_fillColor == "#FFFFFF"){
				curObject_fillColor = "#000000";
			}
			
			var curObject_cx = circle[curObject].attr('cx');
			var curObject_cy = circle[curObject].attr('cy');
			CI_pairwise[curObject] = paper.path("M " + x_0_1 + " " + y_0_1 + " l " + diff_x + " " + diff_y).attr( {		stroke:curObject_fillColor,		'stroke-width':5,		'opacity': 0.1	});
			
			  if(isDisplayDistance){
				var distStr =  dist.toPrecision(3) + " ["+ quantile(pairwiseDistance, 0.1).toPrecision(3) + ", " + quantile(pairwiseDistance, 0.9).toPrecision(3) + "]";
				CI_pairwise_legend[curObject] = paper.text(x_0_9, y_0_9,distStr ).attr({'font-size': 10,fill:'#000000', cursor: 'pointer'});
				CI_pairwise_legend[curObject].toFront();
			  } 
			  
			  
			}//curObject iteration

		}
		
	
		
		if(loadedSerumPotency && loadedVirusAvidity){
		if(newVariationCircleIsTriggered[objectID] == 0){
		//print the distribution of values..
		if(readDataType ==1){
			var x_data = new Array(numSamples);
			var y_data = new Array(numSamples);

	 	   var curCircle_x = this.attr('x') + radius;
	 	   var curCircle_y = this.attr('y') + radius; 
	 	   var curCircle_color = this.attr('fill');
	 	   var curStrokeWidth = 0;
	 	   if(curCircle_color == "#FFFFFF"){
	 	   	curStrokeWidth = 1;
	 	   }
	 	   
	 	   //alert(Number(serumPotencyData[currentSample+1][1 + objectID]) );
	 	   var delta = Number(serumPotencyData[currentSample+1][1 + objectID]) - 6.32; //radius at 80
	 	   //alert(delta);
	 	   //alert(delta);
	 	   if(delta > 0){
		 	newVariationCircle[objectID] = paper.circle(curCircle_x, curCircle_y, spreadFactor*delta).attr({ stroke: '#3D6AA2', fill: curCircle_color, 'stroke-width':curStrokeWidth, title:i , "fill-opacity":0.1});
	 	  	newVariationCircle[objectID].toBack();
		  	newVariationCircleIsTriggered[objectID] = 1;
			}//if delta>0
	 	  } //readDataType
  		 //alert(dist_80); 
 		} //newVariationCirclesIsTriggered
		
		}//loaded serum potency
				
		
	},
	function(){
				var objectID = Number(this.attr('title'));
		for(var curObject=0; curObject < numViruses; curObject++){
			CI_pairwise[curObject].hide();
			CI_pairwise[curObject] = null;
			
			if(isDisplayDistance){
			  CI_pairwise_legend[curObject].hide();
			  CI_pairwise_legend[curObject] = null;
			 }
		}
		
		//var objectID = Number(this.attr('title'));
		  newVariationCircle[objectID].hide();
		  newVariationCircle[objectID] = null;
		  newVariationCircleIsTriggered[objectID] = 0;	
	
	}
	);
		
	
  
} //sera


//alert(numSera);
//alert(numSera);
	var divTextSera = document.createElement('divTextSera');
	divTextSera.innerHTML="select a specific antiserum<br>";
	document.getElementById("barSera").appendChild(divTextSera);
	var newSelectSera = document.createElement("select");
	newSelectSera.id = "selectlistid"; //add some attributes
	newSelectSera.size = 10;
//	newSelect.onchange = somethingChanged;  // call the somethingChanged function when a change is made
	newSelectSera.onchange = selectPointSera;
	//newSelect[newSelect.length] = new Option("One", "1", false, false); // add new option
	//newSelect[newSelect.length] = new Option("Two", "2", false, false); // add new option

	for(var i=0; i < numSera; i++){
		newSelectSera[newSelectSera.length] = new Option(serumName[i],i, false, false);
	}
		
	document.getElementById("barSera").appendChild(newSelectSera); // myDiv is the container to hold the select list
	




/*
var divTextSeraD = document.createElement('divText');
	divTextSeraD.innerHTML="Select a specific antiserum for computing distance (and to obtain a list of viruses within the neighborhood of radius 1)<br>";
//	document.getElementById("distance_virus").appendChild(divTextD);
document.getElementById("distance_serum").appendChild(divTextSeraD); // myDiv is the container to hold the select list

var newSelectSeraD = document.createElement('select');
	newSelectSeraD.id = "selectSerumD"; //add some attributes
	newSelectSeraD.size = 10;
	newSelectSeraD.onchange = selectPointSerumD;  // call the somethingChanged function when a change is made
	for(var i=0; i < numSera; i++){
		newSelectSeraD[newSelectSeraD.length] = new Option(seraData[0][1+2*i],i, false, false);
	}
	document.getElementById("distance_serum").appendChild(newSelectSeraD); // myDiv is the container to hold the select list
	*/




} //end function

//Vietnamnese data analysis
//var colorCluster = new Array("#171E24","#3A7295", "#0B5A9F", "#ED68C5","#C02900", "#7FAD6C", "#025A1E", "#1D7332", "#329135", 
//"#F77565", "#CB301C", "#841410", "#BC1711", "#B0B02E", "#6C5BC5", "#306877", "#F95A23", "#83AE69");


//var colorClusterStroke = new Array("#33FF00", "#666600", "#663300", "#FF0000", "#FF9900", "#FFFF00", "#3300CC", "#3399CC", "#6633CC", "#FF33CC", "#FFCCCC", "#0000CC", "#00CCCC", "#9933CC", "#CCFFFF", "#CCFF99", "#330000" , "#336600" );
//var colorClusterStroke = new Array("#336633", "#663333", "#FF3366", "#FF6666", "#FF9933", "#333333", "#339933", "#663333", "#FF3333", "#FFCC33", "#000033", "#00CC33", "#993333", "#CCFF33", "#CCFF00", "#330099" , "#336699" );
//var colorCluster = new Array("#33FFFF", "#6666FF", "#6633FF", "#FF00FF", "#FF99FF", "#FFFFFF", "#330033", "#339933", "#663333", "#FF3333", "#FFCC33", "#000033", "#00CC33", "#993333", "#CCFF33", "#CCFF00", "#330099" , "#336699" );

//var colorCluster = new Array("#33FF00", "#666600",  "#FF0000", "#FF9900", "#FFFF00", "#3300CC", "#3399CC", "#6633CC", "#FF33CC", "#FFCCCC", "#0000CC", "#00CCCC", "#9933CC", "#CCFFFF", "#CCFF99", "#330000" , "#336600" );

//# 0.67 version.. with FigTree s HSB spectrum


//HSB spectrum
/*
var colorClusterStroke = new Array(
"#D23333",
"#D13333",
"#D03333",
"#C36633",
"#9E9933",
"#789933",
"#6A9966",
"#6A9966",
"#6A6666",
"#6C6666",
"6D6699",
"#7B6699",
"#A13399",
"#C53399",
"#D23399",
"#D23366",

"#FF9999");

//HSB spectrum
var colorCluster = new Array(
"#D2706E",
"#D1936E",
"#D0B76E",
"#C3CD6E",
"#9ECC6E",
"#78CC6E",
"#6ACC87",
"#6ACDAC",
"#6ACED0",
"#6CACD0",
"6D8AD0",
"#7B73D0",
"#A174D0",
"#C575D0",
"#D274B8",
"#D27293",

"#FFFFFF");
*/


var colorClusterStroke = new Array(
"#483AE4",
"#EA3443",
"#FFB226",
"#56F827",
"#22939B",
"#9B3595",
"#FF6627",
"#F0FA26",
"#484848",
"#A79DF2",
"#F69BA4",
"#FFD998",
"#AEFB98",
"#97CACE",
"#CE9CCB",
"#FFB398",
"#F8FC98",
"#C4C4C4",
"#261F79",
"#7C1C23",
"#885E14",
"#2E8415",
"#134E52",
"#521C4F",
"#893614",
"#808514",
"#483AE4",
"#EA3443",
"#FFB227",
"#56F827",
"#23939B",
"#9B3595",
"#FF6527",
"#F0FA26",
"#484848",
"#A79DF2",
"#F69BA4",
"#FFD998",
"#AEFB98",
"#97CACE",
"#CE9CCB",
"#FFB398",
"#F9FC98",
"#C5C4C5",
"#261F79",
"#7C1C24",
"#885E14",
"#2E8415",
"#134E52",
"#521C4F",
"#893615",
"#808514",
"#483AE4",
"#EA3443",
"#FFB227",
"#56F827",
"#23939B",
"#9B3595",
"#FF6527",
"#F0FA26",
"#484848",
"#A79DF2",
"#F69BA4",
"#FFD998",
"#AEFB98",
"#97CACE",
"#CE9CCB",
"#FFB398",
"#F9FC98",
"#C5C4C5",
"#261F79",
"#7C1C24",
"#885E14",
"#2E8415",
"#134E52");




//75 colors
var colorCluster = new Array(
"#483AE4",
"#EA3443",
"#FFB226",
"#56F827",
"#22939B",
"#9B3595",
"#FF6627",
"#F0FA26",
"#484848",
"#A79DF2",
"#F69BA4",
"#FFD998",
"#AEFB98",
"#97CACE",
"#CE9CCB",
"#FFB398",
"#F8FC98",
"#C4C4C4",
"#261F79",
"#7C1C23",
"#885E14",
"#2E8415",
"#134E52",
"#521C4F",
"#893614",
"#808514",
"#483AE4",
"#EA3443",
"#FFB227",
"#56F827",
"#23939B",
"#9B3595",
"#FF6527",
"#F0FA26",
"#484848",
"#A79DF2",
"#F69BA4",
"#FFD998",
"#AEFB98",
"#97CACE",
"#CE9CCB",
"#FFB398",
"#F9FC98",
"#C5C4C5",
"#261F79",
"#7C1C24",
"#885E14",
"#2E8415",
"#134E52",
"#521C4F",
"#893615",
"#808514",
"#483AE4",
"#EA3443",
"#FFB227",
"#56F827",
"#23939B",
"#9B3595",
"#FF6527",
"#F0FA26",
"#484848",
"#A79DF2",
"#F69BA4",
"#FFD998",
"#AEFB98",
"#97CACE",
"#CE9CCB",
"#FFB398",
"#F9FC98",
"#C5C4C5",
"#261F79",
"#7C1C24",
"#885E14",
"#2E8415",
"#134E52"
);


var loadedSerumPotency = 0;
var loadedVirusAvidity = 1;


var loadedMdsLog = 0;

var MdsLogData;
var maxSampleIndex;

function readMdsLog(MdsLog_str){
	loadedMdsLog = 1;
	MdsLogData = CSVToArray( MdsLog_str , "\t");
	var numSamplesThisFile = MdsLogData.length - 1;

	if(isNaN(numSamples)){
		numSamples = numSamplesThisFile;
	}	
	else{
		if(numSamplesThisFile != numSamples){
			alert("Error. The number of samples was previously specified to be "+ numSamples + ", but this files likely contains " + numSamplesThisFile + " samples.\n");
		}
	}
	//the second column is the posterior
	//get the maximum posterior:
	maxSampleIndex=0;
	var maxScore = Number(MdsLogData[0+1][1]);
	for(var i=0; i < numSamples; i++){
		if(maxScore < Number(MdsLogData[i+1][1]) ){
			maxScore = Number(MdsLogData[i+1][1]);
			maxSampleIndex = i;
		}
	}
	
}


var load_ddCRPLog = 0;
var ddCRPLogData;
function read_ddCRP_log(ddCRPLog_str){
	load_ddCRPLog = 1;
	ddCRPLogData = CSVToArray( ddCRPLog_str , "\t");
	var numSamplesThisFile = ddCRPLogData.length - 1;

	if(isNaN(numSamples)){
		numSamples = numSamplesThisFile;
	}	
	else{
		if(numSamplesThisFile != numSamples){
			alert("Error. The number of samples was previously specified to be "+ numSamples + ", but this files likely contains " + numSamplesThisFile + " samples.\n");
		}
	}
	
	//change color.
	
 
 
 
 //var colorCluster = new Array("#FF0000", "#3366FF", "#33CC33", "#FF9900", "#996633", "#666699");
 //color the clades
 for(var c=0; c< numViruses; c++){
 	circle[c].toFront();
 	//circle[c].attr({stroke:colorCluster[ddCRPLogData[2][c+2]], fill: colorCluster[ddCRPLogData[2][c+2]]});
 	//circle[c].attr({fill: colorCluster[ddCRPLogData[2][c+2]]});
 	circle[c].attr({stroke: colorClusterStroke[ parseInt(ddCRPLogData[numSamples][c+2])], fill: colorCluster[ parseInt(ddCRPLogData[numSamples][c+2])]});
 }
 
	isCircleColorAnnotated = 1;
	
}



var load_cluster_path = 0;
var clusterPathData;
var cluster_centroid_x ;
var cluster_centroid_y ;
var num_clusters;
var clusterPathLine;
function read_path(path_str){

 if(load_ddCRPLog == 0){
 	alert("Need to load the ddCRP file first");
 }
 	clusterPathData = CSVToArray( path_str , "\t");
	var numSamplesThisFile = clusterPathData.length - 1;
	load_cluster_path = 1;

	if(isNaN(numSamples)){
		numSamples = numSamplesThisFile;
	}	
	else{
		if(numSamplesThisFile != numSamples){
			alert("Error. The number of samples was previously specified to be "+ numSamples + ", but this files likely contains " + numSamplesThisFile + " samples.\n");
		}
	}
	
	//var c=0;
	//alert(numSamples);
	//alert(parseInt(ddCRPLogData[numSamples][c+2]));
	
	
	//put viruses into string lists
	var cluster_members = new Array();
	for(var i=0; i< numViruses; i++){
		cluster_members[i] = "";	
	}
	
	for(var c=0; c< numViruses; c++){
		cluster_members[ parseInt(ddCRPLogData[numSamples][c+2]) ] = cluster_members[ parseInt(ddCRPLogData[numSamples][c+2]) ] +  c + "\t" ; 
	}
	
	//alert(cluster_members[0]);

	num_clusters = 0;
	var clusterLabel = new Array();
	cluster_centroid_x = new Array();
	cluster_centroid_y = new Array();
	
	
	//calculate cluster mean in each cluster
	for(var c=0; c< numViruses; c++){
 		if( cluster_members[c] != ""){
 			clusterLabel[num_clusters] = c;
 			num_clusters++;			
 		} 
 	}
 	//alert(clusterLabel);
 	for(var c=0; c< num_clusters; c++){
 		cluster_centroid_x[c] = 0;
 		cluster_centroid_y[c] = 0;
 	}

	for(var c=0; c< num_clusters; c++){ 
		//alert(cluster_members[ clusterLabel[c] ]);
 		var members = CSVToArray( cluster_members[ clusterLabel[c] ] , "\t");
 		var numElements = members[0].length - 1;
 		for(var j=0; j < numElements; j++){
 			var virusIndex = parseInt(members[0][j]);
 			//alert(virusIndex);
 			cluster_centroid_x[c] += circle[virusIndex].attr('cx');
 			cluster_centroid_y[c] += circle[virusIndex].attr('cy');
 		}
 		cluster_centroid_x[c] = cluster_centroid_x[c]/numElements;
 		cluster_centroid_y[c] = cluster_centroid_y[c]/numElements; 
	}

	
	for(var c=0; c<num_clusters; c++){
		//alert(cluster_centroid_x[c]);
		//alert(cluster_centroid_y[c]);
		//paper.circle( cluster_centroid_x[c], cluster_centroid_y[c], 10).attr({ stroke: '#3D6AA2'});
	}
	
	/*
	clusterPathLine = new Array();
	//connect the paths
	for(var c=1; c<num_clusters; c++){
		var c2 = parseInt(clusterPathData[numSamples][c+1]);
		//alert(c + " and " + c2);
		clusterPathLine[c] = paper.path("M " + cluster_centroid_x[c] + " " + cluster_centroid_y[c] + " L " + cluster_centroid_x[c2] + " " + cluster_centroid_y[c2]).attr( {		stroke: '#3399FF',		'stroke-width':3,		'opacity': 0.8	});
	}
	*/
}



var load_mutations = 0;
var mutationsData;
var driverMutations_labels;
function read_mutations(mutations_str){

 if(load_ddCRPLog == 0){
 	alert("Need to load the cluster path file first");
 }
 	mutationsData = CSVToArray( mutations_str , "\t");
	var numSamplesThisFile = mutationsData.length - 1;
	load_mutations = 1;

	if(isNaN(numSamples)){
		numSamples = numSamplesThisFile;
	}	
	else{
		if(numSamplesThisFile != numSamples){
			alert("Error. The number of samples was previously specified to be "+ numSamples + ", but this files likely contains " + numSamplesThisFile + " samples.\n");
		}
	}

	driverMutations_labels = new Array();
	for(var c=1; c<num_clusters; c++){
		var c2 = parseInt(clusterPathData[numSamples][c+1]);
		var mid_x = (cluster_centroid_x[c2] +cluster_centroid_x[c])/2 ;  
		var mid_y = (cluster_centroid_y[c2] +cluster_centroid_y[c])/2;
		driverMutations_labels[c] = paper.text(mid_x, mid_y, (parseInt(mutationsData[numSamples][c+1])+"")).attr({ 'font-size': 12, fill: '#000000', cursor: 'pointer' });
	}
	
}





var serumPotencyData;
function readSerumPotency(serumPotency_str){
	loadedSerumPotency = 1;
	serumPotencyData = CSVToArray( serumPotency_str , "\t");
	var numSamplesThisFile = serumPotencyData.length - 1;

	if(isNaN(numSamples)){
		numSamples = numSamplesThisFile;
	}	
	else{
		if(numSamplesThisFile != numSamples){
			alert("Error. The number of samples was previously specified to be "+ numSamples + ", but this files likely contains " + numSamplesThisFile + " samples.\n");
		}
	}	
}

var virusAvidityData;
function readVirusAvidity(virusAvidity_str){
	loadedVirusAvidity = 1;
	virusAvidityData = CSVToArray( virusAvidity_str , "\t");
	var numSamplesThisFile = virusAvidityData.length - 1;
	if(isNaN(numSamples)){
		numSamples = numSamplesThisFile;
	}	
	else{
		if(numSamplesThisFile != numSamples){
			alert("Error. The number of samples was previously specified to be "+ numSamples + ", but this files likely contains " + numSamplesThisFile + " samples.\n");
		}
	}		
}



var cluster_assignment = new Array();
function add_cluster_color(cluster_str){
 var cluster_data = CSVToArray( cluster_str , "\t");
 
 var groupColumn = 3;
 var virusColumn = 1;
 
 var numSamples = cluster_data.length;
 

 var groupNames = new Array();
 var numGroups = 0;
  
 //alert(numSamples);
 //column 2 - strain . column 4 - clade.
//alert("hi")
 //identify unique clades (number, and which - index them)
 for(var row=0; row < numSamples; row++){
 	//alert(cluster_data[row][groupColumn]);
 	var groupNumber = hasIdentifiedGroup(cluster_data[row][groupColumn], groupNames, numGroups); 
 	if(groupNumber == -1){
 	//alert( cluster_data[row][groupColumn])
 		 groupNames[numGroups] = cluster_data[row][groupColumn];
		 cluster_assignment[row] = numGroups;
		 groupStr = "clade " + cluster_data[row][groupColumn] + " is group #" + numGroups;
		 numGroups++;
//		 alert(groupStr);
 	}
 	else{
 	 	//alert("can't identify")
 		cluster_assignment[row] = groupNumber;
 	}
 }
// alert(cluster_assignment); 
//alert(cluster_assignment[32]);

//alert(virusName);
//match virusname from the virus location data to that from the other data
var matchIndexes = new Array();
for(var v=0; v < virusName.length; v++){
  for(var i=0; i < numSamples; i++){
  	 if(virusName[v] == cluster_data[i][virusColumn]){
  	 	matchIndexes[v] = i;
  	 	break;
  	 }
  }
}


 //create a dictionary of clade name and color as a function of indexes
 //var cladeColor
 
 
// var colorCluster = new Array("#171E24","#3A7295", "#0B5A9F", "#ED68C5","#C02900", "#7FAD6C", "#025A1E", "#1D7332", "#329135", 
//"#F77565", "#CB301C", "#841410", "#BC1711", "#B0B02E", "#6C5BC5", "#306877", "#F95A23", "#83AE69");

 
 //color the clades
 for(var c=0; c< numViruses; c++){
 	circle[c].toFront();
 	circle[c].attr({stroke:colorClusterStroke[cluster_assignment[matchIndexes[c]]], fill: colorCluster[cluster_assignment[matchIndexes[c]]]});
 }
 
 
 //if success
 isCircleColorAnnotated = 1;

}


function hasIdentifiedGroup(x, groups, numGroups){
 var groupIndex = -1;
 if(numGroups > 0 ){
 	for(var i=0; i < numGroups; i++){
 		if(x == groups[i]){
 			groupIndex = i;
 			break;
 		}
 	}
 }
 return(groupIndex);	
}


function average(data) {
var result = 0;
for(var i=0; i < data.length; i++) {     
    result += data[i];    
}
return(result / data.length);
}


//adopted from http://caseyjustus.com/finding-the-median-of-an-array-with-javascript
// turns out the original version had a bug. it sorted the original data
function median(data) {
 	var values = new Array(data.length);
 	for(var i=0; i < data.length; i++){
 		values[i] = data[i];
 	} 
 	values.sort( function(a,b) {return a - b;} ); 
    var half = Math.floor(values.length/2);
 
    if(values.length % 2 )
        return values[half];
    else
        return (values[half-1] + values[half]) / 2.0;
}
 

function quantile(data, prob) {
	var values = new Array(data.length);
 	for(var i=0; i < data.length; i++){
 		values[i] = data[i];
 	} 
	 values.sort( function(a,b) {return a - b;} );
	 
    var index_prob = Math.floor(values.length * prob);

    if( (values.length+1) % (1/prob)==0 ){
    	
        return values[index_prob];
       }
    else{
    	
        return (values[index_prob-1] + values[index_prob]) / 2.0;
       }
}
 

function panOption(){
	if(chk_pan.checked == false){
		panZoom.disable();
		document.getElementById("button_Zoomin").style.background='#B2CBE6'; 
		document.getElementById("button_Zoomout").style.background='#B2CBE6';  // doesn't work.'
	}
	else{           
		panZoom.enable();
		document.getElementById("button_Zoomin").style.background='#0074CC'; 
		document.getElementById("button_Zoomout").style.background='#0074CC';  // doesn't work.'
		
		    if(zoomLevel == 9){  document.getElementById("button_Zoomin").style.background='#B2CBE6'; }      	
           	if(zoomLevel > 0){	document.getElementById("button_Zoomout").style.background='#0074CC'; }
      		if(zoomLevel < 9){ document.getElementById("button_Zoomin").style.background='#0074CC';}
      		if(zoomLevel ==0){	document.getElementById("button_Zoomout").style.background='#B2CBE6';}      	                    	
	}	
} 
 
function checkDistanceOption(){
	if(chk_displayDistance.checked == false){
		isDisplayDistance = 0;
	}
	else{           
		isDisplayDistance = 1;
	}

}


function handleClick(cb) {
	alert("yo");
}


function trimHeadAndBottom(fileStr){
	var fileOutput = fileStr;
	fileOutput= fileOutput.replace(/^#.*$/mg,""); //trim line that begins with #
	fileOutput = fileOutput.replace(/^\s+|\s+$/g, ''); //trim leading and trailing spaces and empty lines
	return fileOutput;

	
	//return(fileOutput);
} 
 
var numSamples; 

//To keep track of the Procrustes transformation
var m_x;
var m_y;
var theta_samples;
var flip_samples;



var virusName;
var x_virus;
var y_virus;

//var isProcrustes = 1;

var isAlign = 1;
var isFlip = 1;
var isRotate = 1;

var isDisplayDistance = 1;


var currentSample;


var panZoom;

var textSizeLabel = 12;

function addViruses(dataStr, readDataType){
	
	
if(chk_displayDistance.checked == false){
	isDisplayDistance = 0;
}
else{           
	isDisplayDistance = 1;
}

	
if(align.checked == false){
	isAlign = 0;
}
else{           
	isAlign = 1;
}


if(toFlip.checked == false){
	isFlip = 0;
}
else{           
	isFlip = 1;
}
	
	
	
if(rotate.checked == false){
 	isRotate = 0;
}
else{           
	isRotate = 1;
}
	
	
 data = CSVToArray( dataStr , "\t");

 virusLoaded = 1;


if (readDataType == 1) {
	var year = parseTime(data[0]);
	var minYear = findMin(year);
	var maxYear = findMax(year);
	numViruses = (data[0].length - 1) / 2;
}
else if (readDataType ==2){
	numViruses = data.length -1;
}
//	alert(numViruses);


	
	var x_coord = new Array(numViruses);
	var y_coord = new Array(numViruses);
	virusName = new Array(numViruses);
	
	numSamples = data.length -1;
//var t_data = data;


m_x = new Array(numSamples);
m_y = new Array(numSamples);



 //align
 
 if(isAlign){
	if(readDataType ==1){


	//assume the first column is the names... and then there are numSamples, from 1 to nSamples
		  	for(var k=0; k < numSamples; k++){

			var x_data = new Array(numViruses);
			var y_data = new Array(numViruses);
	  		
			//select the x and y data on the sample
			for (var i = 0; i < numViruses; i++) {
				x_data[i] = Number(data[k+1][2*i + 1]); //the first datapoint starts on the second line
				y_data[i] = Number(data[k+1][2*i + 2]);
			}	
			
			//Compute median of the k_th sample
			m_x[k] = median(x_data);
	  		m_y[k] = median(y_data);
	  				
	  		for (var i = 0; i < numViruses; i++) {
	  			
	  			data[k+1][2*i+1] = Number(data[k+1][2 * i + 1]) - m_x[k];//changing data, not t_data
				data[k+1][2*i+2] = Number(data[k+1][2 * i + 2]) - m_y[k]; //changing data, not t_data	
			}
			//alert(x_data);		
		 } //k
		
			   	 
  	 } //readDataType
  }//isAlign


 currentSample = numSamples - 1;

//reference is the last line of the data
 //score:
if(isRotate | isFlip){

var t_data = [];
for(var i=0; i< data.length; i++) {
    t_data[i] = new Array(data[i].length);
}

for(var i=0; i < data.length; i++){
	for(var j=0; j < data[i].length; j++){
		t_data[i][j] = data[i][j];
	}
}
 
 
  theta_samples = new Array(numSamples);
  flip_samples = new Array(numSamples);
 
 var ref_index = currentSample + 1;
 
 theta_samples[currentSample] = 0;  //last line is the reference 
 flip_samples[currentSample] = 0;
 
 for(var k=1; k <= numSamples; k++){
 
 

 var min_hasFlipped=0;
 var min_theta = 0;
 var min_score;
	
	var theta_solution = 0;
 	var score = 0;
 	
	for (var i = 0; i < numViruses; i++) {
   	//	score = score + Math.sqrt( Math.pow( (data[ref_index][2*i+1] -t_data[k][2*i+1]),2) + Math.pow( (data[ref_index][2*i+2] -t_data[k][2*i+2]),2) );
   		score = score + Math.pow( (t_data[k][2*i+1]- data[ref_index][2*i+1]),2) + Math.pow( (t_data[k][2*i+2]-data[ref_index][2*i+2]),2) ;
	} 
	min_score = score;
//alert(min_score);
 
for(var flip = 0; flip <=isFlip; flip++){


	//first, copy the original data:
 	for(var i=0; i < t_data[k].length; i++){
 		t_data[k][i] = data[k][i];
 	}
 	
  if(flip==1){
 //flip horizontally
    for (var i = 0; i < numViruses; i++) {
		t_data[k][2*i+1] = -t_data[k][2*i+1];
	}
  }
	
   if(isRotate){
   		
	var top =0;
	var bottom = 0;
	for(var i=0; i < numViruses; i++){
		top = top + t_data[k][2*i+1]*data[ref_index][2*i+2] - t_data[k][2*i+2]*data[ref_index][2*i+1];
	}
	for(var i=0; i < numViruses; i++){
		bottom = bottom + t_data[k][2*i+1]*data[ref_index][2*i+1] + t_data[k][2*i+2]*data[ref_index][2*i+2];
	}
		//alert(top/bottom);	  
	theta_solution = Math.atan( top/bottom)	;
//alert(theta_solution);

	for (var i = 0; i < numViruses; i++) {
		var new_x, new_y;
		 new_x =  t_data[k][2*i+1]*Math.cos(-theta_solution) + t_data[k][2*i+2]*Math.sin(-theta_solution);   
		 new_y = -t_data[k][2*i+1]*Math.sin(-theta_solution) + t_data[k][2*i+2]*Math.cos(-theta_solution);
		t_data[k][2*i+1] = new_x;
		t_data[k][2*i+2] = new_y;
		
		//t_data[k][2*i+1] = -0.844;
		//t_data[k][2*i+2] = -1.32;
	}
	
   }//isRotate

	var score = 0;
	for (var i = 0; i < numViruses; i++) {
   		//score = score + Math.sqrt( Math.pow( (data[ref_index][2*i+1] -t_data[k][2*i+1]),2) + Math.pow( (data[ref_index][2*i+2] -t_data[k][2*i+2]),2) );
   		score = score + Math.pow( (t_data[k][2*i+1]- data[ref_index][2*i+1]),2) + Math.pow( (t_data[k][2*i+2]-data[ref_index][2*i+2]),2) ;
	} 

	if(min_score > score){
		min_score = score;
		min_hasFlipped = flip;
		min_theta = theta_solution;
	}

}



//var xyz = -min_theta*180/Math.PI;
//var str = "min_theta" + xyz + " score=" + min_score;

//alert(-min_theta*180/Math.PI);
//var str = "min_theta" + min_theta + " score=" + min_score;

//alert(str);

theta_samples[k-1] = -min_theta;  //not sure why I need that negative, but it seems that the solution needs to be flipped. I think it is the counterclockwise vs. clockwise thing.
flip_samples[k-1] = min_hasFlipped; 



//Apply transformation
//set to the value that maximizes the score

  if(min_hasFlipped==1){
 // 	alert("flipping");
 //flip horizontally
    for (var i = 0; i < numViruses; i++) {
		data[k][2*i+1] = -data[k][2*i+1];
	}
  }

  //rotation  
  for (var i = 0; i < numViruses; i++) {
		var new_x, new_y;
		 new_x =  data[k][2*i+1]*Math.cos(-min_theta) + data[k][2*i+2]*Math.sin(-min_theta);   
		 new_y = -data[k][2*i+1]*Math.sin(-min_theta) + data[k][2*i+2]*Math.cos(-min_theta);
		data[k][2*i+1] = new_x;
		data[k][2*i+2] = new_y;
	}
	

  //alert("transformed to achieve the best fit.");
  
 }
 }//isRotate or isFlip
else{
	//no rotation and no flip
}

	//plot the last iteration
	if (readDataType == 1) {
		for (var i = 0; i < numViruses; i++) {
			x_coord[i] = Number(data[currentSample+1 ][2 * i + 1]);
			y_coord[i] = Number(data[currentSample+1 ][2 * i + 2]);
			virusName[i] = data[0][1 + 2 * i].substring(0, data[0][1 + 2 * i].length - 1);
		  //name[i-1] = array[i].substring(0 , array[i].length-1));	
		}		
	}
	else if (readDataType ==2){
		for (var i = 0; i < numViruses; i++) {
			x_coord[i] = Number(data[i + 1][3]);
			y_coord[i] = Number(data[i + 1][4]);
			virusName[i] = data[i+1][1];
		}
		
	}
	
	
	x_virus = x_coord;
	y_virus = y_coord;
	
	var x_max, y_max, x_min, y_min;
	
	if(readDataType ==1){
		x_max = findMax(x_coord);
		y_max = findMax(y_coord);
		x_min = findMin(x_coord);
		y_min = findMin(y_coord);

	  for(var k=1; k <= numSamples; k++){		
		for(var i=0; i < numViruses; i++){
			if(Number(data[k][2*i+1])> x_max){
				x_max = data[k][2*i+1];
			}
			if(Number(data[k][2*i+1])< x_min){
				x_min = data[k][2*i+1];
			}
			if(Number(data[k][2*i+2])> y_max){
				y_max = data[k][2*i+2];
			}
			if(Number(data[k][2*i+2])< y_min){
				y_min = data[k][2*i+2];
			}			
		}
	   }
	   
 
	   
	   
	}
	else if(readDataType ==2){
		x_max = findMax(x_coord);
		y_max = findMax(y_coord);

		x_min = findMin(x_coord);
		y_min = findMin(y_coord);	
	}

	//alert(x_coord);

	//alert("hi");	

//    var text2 = paper.text(50, 50, data[0][1]).attr({ 'font-size': 8, fill: '#000000', cursor: 'pointer' });
//var text3 = paper.text(100, 160, data.length).attr({ 'font-size': 8, fill: '#000000', cursor: 'pointer' });
//  var text3 = paper.text(100, 100, data[0].length).attr({ 'font-size': 8, fill: '#000000', cursor: 'pointer' });




  
    // Write text in the center of the canvas.
   // var text = paper.text(320, 240, "Center").attr({ 'font-size': 22, fill: '#FFFFFF', cursor: 'pointer' });

//data[1].sort();
//var xx = document.getElementById("demo");
//xx.innerHTML=data[1];
    


var x_range = x_max - x_min;
var y_range = y_max - y_min;

var x_or_y_range_bigger = 0;
if(y_range > x_range){
	x_or_y_range_bigger = 1;  //range of y is bigger
}


//var x_off = -(x_min);
//var y_off = -(y_min);


//var MAXplotHeight = 1200;
//var MAXplotWidth = 1200;



//var plotYRange = MAXplotHeight - 2*y_offset;
//var plotXRange = MAXplotWidth - 2*x_offset;

//var maxSpread = Math.min(plotYRange/y_range, plotXRange/x_range);

//var plotHeight = maxSpread*y_range + y_offset*2;
//alert(plotHeight);
//var plotWidth = maxSpread*x_range + x_offset*2;
//alert(plotWidth);




//elem2.style.width = plotWidth;
//elem2.style.height = plotHeight;

//var spreadFactor = maxSpread;


var interval_size_x = 1;
var interval_size_y = 1;

var xposStart = (Math.min(Math.ceil(x_min/interval_size_x), Math.floor(x_min/interval_size_x))*interval_size_x); //coz it may be a negative number
var yposStart = (Math.min(Math.ceil(y_min/interval_size_y), Math.floor(y_min/interval_size_y))*interval_size_y); //coz it may be a negative number

var xposEnd = (Math.max(Math.ceil(x_max/interval_size_x), Math.floor(x_max/interval_size_x))*interval_size_x); //coz it may be a negative number
var yposEnd = (Math.max(Math.ceil(y_max/interval_size_y), Math.floor(y_max/interval_size_y))*interval_size_y); //coz it may be a negative number

//var xposStart =  Math.floor(x_min) -2;
//var yposStart =  Math.floor(y_min) -2;

x_off = -(xposStart);
y_off = -(yposStart);

//now each line is 1 unit
//var numHline = 28;
//var numVline = 11;
//var xposStart  = -3;
//var yposStart = -6;

//var plot_x_range = Math.ceil(x_range) + 1;
//var plot_y_range = Math.ceil(y_range) + 4;

var plot_x_range =  xposEnd-xposStart;
var plot_y_range = yposEnd-yposStart;

//alert(plot_x_range);
//alert(plot_y_range);

var numHline = Math.ceil(plot_x_range/interval_size_x);
var numVline = Math.ceil(plot_y_range / interval_size_y);


var y_axisLength = plotHeight - 2*y_offset;  //available height
var x_axisLength = plotWidth -2*x_offset;  //available width


 spreadFactor = Math.floor(Math.min(y_axisLength/plot_y_range, x_axisLength/plot_x_range));  //determine maxSpread based on all the runs later...
var yDimension = 2*y_offset + numVline*interval_size_y*spreadFactor;
var xDimension = 2*x_offset+ numHline*interval_size_x*spreadFactor;

//update plot height
plotHeight = yDimension;
plotWidth = xDimension;
//update axis length:
 y_axisLength = plotHeight - 2*y_offset;  //available height
 x_axisLength = plotWidth -2*x_offset;  //available width

	
	 var x_origin = x_offset +  x_off*spreadFactor;
	var y_origin = plotHeight - (y_offset + y_off*spreadFactor);



paper = Raphael('drawing_board');

var ele = document.getElementById("drawing_board");
var dimensionStr = "width: " + plotWidth + "; height:" + plotHeight;

panZoom = paper.panzoom({ initialZoom: 0, initialPosition: { x: 0, y: 0} });
//panZoom.enable();
panZoom.disable();
paper.safari();
//ele.setAttribute("style",dimensionStr); //update height and width    




for (var i = 0; i <= numHline; i++) {
	var pos = i*interval_size_x + xposStart; //start from -1
	
//	var x_grid = x_offset + (x_off + pos) * spreadFactor;
	var x_grid = x_offset + (x_off + pos) * spreadFactor;
	//draw vertical line
	//var y_begin =plotHeight - (y_offset + (y_off + yposStart + numVline) * spreadFactor) ;
	
	var y_begin =plotHeight - y_offset - numVline*interval_size_y*spreadFactor;
	//var yline = paper.path("M " + x_grid + " " + y_begin + " l 0 " + (numVline*interval_size_y)*spreadFactor).attr( {		stroke: '#996600',		'stroke-width':1,		'opacity': 0.8	});
	var yline = paper.path("M " + x_grid + " " + y_begin + " l 0 " + (numVline*interval_size_y)*spreadFactor).attr( {		stroke: '#3399FF',		'stroke-width':1,		'opacity': 0.8	});
	if( pos == 0){
//now comment this out so the origin line won't be black
//		yline.attr( {		stroke: '#000000',		'stroke-width': 2,		'opacity': 0.8	});
	}
	
}


var y = y_offset + numVline*spreadFactor;

for (var i = 0; i <= numVline; i++) {
	var pos = i*interval_size_y + yposStart;
//	var y_grid = plotHeight - (y_offset + (y_off + pos) * spreadFactor);
	var y_grid = plotHeight - (y_offset + (y_off + pos) * spreadFactor);
	//var y_grid = y_offset;
	var x_begin =  x_offset + (x_off + xposStart) * spreadFactor*interval_size_x;
	//draw horizontal line
	var xline = //paper.path("M " + x_begin + " " + y_grid + " l " + (numHline*interval_size_x)*spreadFactor +" 0").attr( {		stroke: '#996600',		'stroke-width':1,		'opacity': 0.8	});
	paper.path("M " + x_begin + " " + y_grid + " l " + (numHline*interval_size_x)*spreadFactor +" 0").attr( {		stroke: '#3399FF',		'stroke-width':1,		'opacity': 0.8	});
	if(pos ==0){
//now comment this out so the origin line won't be black
//		xline.attr( {		stroke: '#000000',		'stroke-width': 2,		'opacity': 0.8	});
	}
}



//alert("hi");
//add offset for now
for(var i=0; i<numViruses; i++){
 x_coord[i] = x_off + x_coord[i];
 y_coord[i] = y_off + y_coord[i];	
}
circle = new Array(numViruses);
text = new Array(numViruses);


newVariationCircle = new Array(numViruses);
newVariationCircleIsTriggered = new Array(numViruses);
for(var i=0; i < numViruses; i++){
	newVariationCircleIsTriggered[i] = 0;
}


CI_pairwise = new Array(numViruses);
CI_pairwise_legend = new Array(numViruses);

//var cluster_membership = kMeansClustering(x_virus, y_virus, 7);
//var gradient = new Array("#FFFFFF","#E2E2FF","#C6C6FF","#AAAAFF","#8D8DFF","#7171FF","#5555FF","#3838FF","#1C1CFF","#0000FF");
//var gradient = new Array("#FFFFFF","#C2C2D6","#0000FF", "#33CC33", "#FF9900" , "#CC33FF", "000000");


for(var i=0; i< numViruses; i++){
  var xpos = x_offset +x_coord[i]*spreadFactor;
  var ypos =  plotHeight - y_offset - y_coord[i]*spreadFactor;

if(xpos > plotWidth){
	alert("xpos > width! error" + xpos);
}
if(ypos > plotHeight){
	alert("ypos > height! error" + xpos);
}
//var posStr = xpos + " " + ypos;
//alert(posStr);
  
  //this is by year color annotation
  //circle[i] = paper.circle(xpos, ypos, radius).attr({ stroke: '#3D6AA2', fill: gradient[gradientIndex], 'stroke-width': 2, title:i , "fill-opacity": opacityValue});
  
  //this is k means clustering
   //circle[i] = paper.circle(xpos, ypos, radius).attr({ stroke: '#3D6AA2', fill: gradient[cluster_membership[i]], 'stroke-width':radius*0.3, title:i , "fill-opacity":1});
   
   circle[i] = paper.circle(xpos, ypos, radius).attr({ stroke: '#3D6AA2', fill: noAnnotationColor, 'stroke-width':radius*0.3, title:i , "fill-opacity":1});   
}



//alert("k-means clustering with k=7");



for (var i = 0; i < numViruses; i++) {
	circle[i].click(function(){
		this.toFront();
  		if(isCircleColorAnnotated == 0){
		//if(this.attr({'fill'})=='#FFFFFF'){
			
			this.attr({fill: AnnotationColor});
		}
		//}
		//text.attr({text:dynamicText, x:280});
		//var text2 = paper.text(280, 280, "Clicked!").attr({			'font-size': 25,			fill: '#009933'		});
		//alert(this.attr('cx'));
		var objectID = Number(this.attr('title'));
		//alert(objectID);
		 if(text[objectID]==null){
		 	
				text[objectID] = paper.text(this.attr('cx') - 5, this.attr('cy') - 10, virusName[this.attr('title')]).attr({
					'font-size': textSizeLabel,
					fill: '#003300',
					cursor: 'pointer'
				});
			
			//originally move start up functions declared here
            text[objectID].drag(move, start, up);
			//originally promptRename declared here
			text[objectID].dblclick(promptRename);

			}
			else{
				if(isCircleColorAnnotated ==0){
					this.attr({fill: noAnnotationColor})  //revert back to the original color
				}
				text[objectID].hide();
				text[objectID] = null;
			}
			//alert(text2[this.attr('title')].status());
			//text2[this.attr('title')].show();
			
			//text2[this.attr('title')].hide();
			
	});
	
	circle[i].hover(function(){
		this.toFront();
		var objectID = Number(this.attr('title'));




		if(readDataType ==1){
			
			
			for(var curObject = 0; curObject < numViruses; curObject++){
			var pairwiseDistance = new Array(numSamples);
	  		 for(var k=0; k<numSamples; k++){	
	  		 	 pairwiseDistance[k] =  Math.sqrt( Math.pow( (Number(data[k+1][2 * objectID + 1]) - Number(data[k+1][2 * curObject + 1])), 2)     
	  		 	                                 + Math.pow( (Number(data[k+1][2 * objectID + 2]) - Number(data[k+1][2 * curObject + 2])), 2) );
					  		 	
	  		 }
 	    	var pivot_x = this.attr('cx');
	 	    var pivot_y = this.attr('cy'); 

			var pt_x = circle[curObject].attr('cx');
	 	    var pt_y = circle[curObject].attr('cy');

			var slope = (pt_y - pivot_y)/ (pt_x -pivot_x);
			//alert(slope);
			///  (Number(data[k+1][2 * objectID + 1]) - Number(data[k+1][2 * curObject + 1]))
			var change_x_0_1 = quantile(pairwiseDistance, 0.1)/ Math.sqrt(  1 + Math.pow(slope,2) ) ;
			var change_y_0_1 = quantile(pairwiseDistance, 0.1) / Math.sqrt(  1 + Math.pow(slope,2) ) *slope ;
			
			change_x_0_1 = change_x_0_1 * spreadFactor;
			change_y_0_1 = change_y_0_1 * spreadFactor;

			//needs to attach direction of change		
			if( pivot_x > pt_x){
				change_x_0_1 = -change_x_0_1;
				change_y_0_1 = - change_y_0_1; 
			}
			
			var change_x_0_9 = quantile(pairwiseDistance, 0.9)/ Math.sqrt(  1 + Math.pow(slope,2) ) ;
			var change_y_0_9 = quantile(pairwiseDistance, 0.9) / Math.sqrt(  1 + Math.pow(slope,2) ) *slope ;
			
			change_x_0_9 = change_x_0_9 * spreadFactor;
			change_y_0_9 = change_y_0_9 * spreadFactor;
		
			if( pivot_x > pt_x){
				change_x_0_9 = -change_x_0_9; 
				change_y_0_9 = - change_y_0_9;
			}
			
			
			
			var x_0_1 = pivot_x + change_x_0_1;
			var y_0_1 = pivot_y + change_y_0_1;
			//var x_0_1 = pivot_x;
			//var y_0_1 = pivot_y;
			
			var x_0_9 = pivot_x + change_x_0_9;
			var y_0_9 = pivot_y + change_y_0_9;
			
			var diff_x = x_0_9 - x_0_1;
			var diff_y = y_0_9 - y_0_1;
			//alert(change_x);
			//alert(change_y);
				
			
		 if( curObject != objectID){  //don't want to plot for the same virus...
			var curObject_fillColor = circle[curObject].attr('fill');
			if(curObject_fillColor == "#FFFFFF"){
				curObject_fillColor = "#000000";
			}
			
			var curObject_cx = circle[curObject].attr('cx');
			var curObject_cy = circle[curObject].attr('cy');
			//alert(curObject_fillColor);
			//var yline = paper.path("M " + curObject_cx + " " + curObject_cy + " l 0 " + quantile(pairwiseDistance,0.1)*spreadFactor).attr( {		stroke:curObject_fillColor,		'stroke-width':1,		'opacity': 0.8	});
			CI_pairwise[curObject] = paper.path("M " + x_0_1 + " " + y_0_1 + " l " + diff_x + " " + diff_y).attr( {		stroke:curObject_fillColor,		'stroke-width':5,		'opacity': 0.1	});
			var dist = Math.sqrt( Math.pow(((pt_y - pivot_y)/spreadFactor) ,2) + Math.pow( ((pt_x -pivot_x)/spreadFactor), 2) );
			var distStr =  dist.toPrecision(3) + " ["+ quantile(pairwiseDistance, 0.1).toPrecision(3) + ", " + quantile(pairwiseDistance, 0.9).toPrecision(3) + "]";
			
			if(isDisplayDistance){		
				CI_pairwise_legend[curObject] = paper.text(x_0_9, y_0_9,distStr ).attr({'font-size': 10,fill:'#000000', cursor: 'pointer'});
				CI_pairwise_legend[curObject].toFront();
			 }
			 
			}//curObject!=objectID

			//paper.path("M " + x_0_3 + " " + y_0_3 + " l " + diff_x_small + " " + diff_y_small).attr( {		stroke:curObject_fillColor,		'stroke-width':5,		'opacity': 0.1	});

//var yline = paper.path("M " + x_0_1 + " " + y_0_1 + " l " + 0 + " " + 100).attr( {		stroke:curObject_fillColor,		'stroke-width':1,		'opacity': 0.8	});
//var yline = paper.path("M " + x_0_9 + " " + y_0_9 + " l " + 0 + " " + 100).attr( {		stroke:curObject_fillColor,		'stroke-width':1,		'opacity': 0.8	});

	 	    //var curCircle_x = this.attr('cx');
	 	    //var curCircle_y = this.attr('cy'); 
//	 	  var centroid_x =   x_offset + (x_off+m_x)*spreadFactor;
 //		 var centroid_y =   plotHeight - y_offset - (y_off +m_y)*spreadFactor;
  	 	  
				 
			//alert( quantile(pairwiseDistance, 0.1)) ;
			//alert( quantile(pairwiseDistance, 0.9)) ;

			}//curObject iteration

		}
		
/*		
		if(newVariationCircleIsTriggered[objectID] == 0){
		//print the distribution of values..
		if(readDataType ==1){
			var x_data = new Array(numSamples);
			var y_data = new Array(numSamples);
		  	//Compute median
		  			  for(var k=0; k < numSamples; k++){
			x_data[k] = Number(data[k+1][2 * objectID + 1]);
			y_data[k] = Number(data[k+1][2 * objectID + 2]);
			}				
			var m_x, m_y, dist_80;
			 m_x = median(x_data);	
	  		 m_y = median(y_data);
	  		 var dist_from_median = new Array(numSamples);
	  		 for(var k=0; k<numSamples; k++){
	  		 	dist_from_median[k] = Math.sqrt(Math.pow( (x_data[k] -m_x) ,2)+Math.pow(( y_data[k]- m_y),2));
	  		 }
	  		 dist_80 = quantile(dist_from_median, .9);   	 
	 	  
	 	   var curCircle_x = this.attr('cx');
	 	   var curCircle_y = this.attr('cy'); 
//	 	  var centroid_x =   x_offset + (x_off+m_x)*spreadFactor;
 //		 var centroid_y =   plotHeight - y_offset - (y_off +m_y)*spreadFactor;
  	 	  
	 	   var curCircle_color = this.attr('fill');
	 	   var curStrokeWidth = 0;
	 	   if(curCircle_color == "#FFFFFF"){
	 	   	curStrokeWidth = 1;
	 	   }
	// 	  	var newVariationCircle = paper.circle(centroid_x, centroid_y, spreadFactor*dist_m).attr({ stroke: '#3D6AA2', fill: curCircle_color, 'stroke-width':curStrokeWidth, title:i , "fill-opacity":0.1});   
		newVariationCircle[objectID] = paper.circle(curCircle_x, curCircle_y, spreadFactor*dist_80).attr({ stroke: '#3D6AA2', fill: curCircle_color, 'stroke-width':curStrokeWidth, title:i , "fill-opacity":0.1});
	 	  	
	 	  newVariationCircle[objectID].toBack();
		  newVariationCircleIsTriggered[objectID] = 1;

	 	  } //readDataType
  		 //alert(dist_80); 

 		} //newVariationCirclesIsTriggered
	*/	
			
	},
	function(){
		
		
		var objectID = Number(this.attr('title'));
		for(var curObject=0; curObject < numViruses; curObject++){
		 if( curObject != objectID){  //don't want to plot for the same virus...

			CI_pairwise[curObject].hide();
			CI_pairwise[curObject] = null;
			if(isDisplayDistance){
				CI_pairwise_legend[curObject].hide();
				CI_pairwise_legend[curObject] = null;
			 }
			}//curObject!=objectID			
		}
		
		
		//var objectID = Number(this.attr('title'));
		 // newVariationCircle[objectID].hide();
		  //newVariationCircle[objectID] = null;
		  //newVariationCircleIsTriggered[objectID] = 0;	
	}
	);
	

}


   //draw grid labels
   //example of pointer label - now not used
   //paper.text(x_origin-12, y_origin+12, "0" ).attr({ 'font-size': 20, fill: '#000000', cursor: 'pointer' });
   
 //  paper.text(x_origin-spreadFactor*0.3, y_origin+spreadFactor*0.3, "0" ).attr({ 'font-size':Math.min(20,spreadFactor*0.5), fill: '#000000' });
   for (var i = 0; i <= numHline; i++) {
   	// x_pt_grid = x_offset + (x_off + i*interval_size_x)*spreadFactor; 
     //paper.text(x_pt_grid, y_origin+0.5*spreadFactor, i*interval_size_x +x_off ).attr({ 'font-size': spreadFactor*0.8, fill: '#000000' });
    var pos = i*interval_size_x + xposStart; //start from -1
    if (pos != 0) {
		var x_grid = x_offset + (x_off + pos) * spreadFactor;
//		paper.text(x_grid, y_origin + 0.5 * spreadFactor, i * interval_size_x + xposStart).attr({
//			'font-size': Math.min(20,spreadFactor * 0.5),
//			fill: '#000000'
//		});
	}
	 
   }
   	
//alert(y_max);

	var y_origin = plotHeight - (y_offset + y_off*spreadFactor);

  for (var i = 0; i <= numVline; i++) {
  	var pos = i*interval_size_y + yposStart; //start from -1
  	if (pos != 0) {
			 
		var y_grid =    plotHeight -  (y_offset + (y_off + pos) * spreadFactor);
		//var y_pt_grid = plotHeight - (y_offset + (y_off + i) * spreadFactor);
//		paper.text(x_origin - 0.5*spreadFactor, y_grid, i*interval_size_y+yposStart).attr({
//			'font-size': Math.min(20,spreadFactor*0.5),
//			fill: '#000000',
//		});
	}
   }

	
//comment out this experimental feature
/*
var divTextD = document.createElement('divText');
	divTextD.innerHTML="Select a specific virus strain for computing distance (first need to select an antiserum)<br>";
//	document.getElementById("distance_virus").appendChild(divTextD);
document.getElementById("distance_virus").appendChild(divTextD); // myDiv is the container to hold the select list

var newSelectD = document.createElement('select');
	newSelectD.id = "selectVirusD"; //add some attributes
	newSelectD.size = 10;
	newSelectD.onchange = selectPointD;  // call the somethingChanged function when a change is made
	for(var i=0; i < numViruses; i++){
		newSelectD[newSelectD.length] = new Option(virusName[i], i, false, false);
	}
	

	document.getElementById("distance_virus").appendChild(newSelectD); // myDiv is the container to hold the select list
	*/



/*
    var newDiv=document.createElement('div');
    var selectHTML = "";
    selectHTML="<select size=10>";
	//selectHTML+="<option>Select Item</option>"
    for(i=0; i<numViruses; i=i+1){
        selectHTML+= "<option value='"+i+"'>"+data[0][1+2*i]+"</option>";
    }
        selectHTML += "</select>";
    newDiv.innerHTML= selectHTML;
    document.getElementById("bar").appendChild(newDiv);
		*/

	
	var divText = document.createElement('divText');
	divText.innerHTML="Select a specific virus strain<br>";
	document.getElementById("bar").appendChild(divText);
	var newSelect = document.createElement("select");
	newSelect.id = "selectlistid"; //add some attributes
	newSelect.size = 20;
//	newSelect.onchange = somethingChanged;  // call the somethingChanged function when a change is made
	newSelect.onchange = selectPoint;
	//newSelect[newSelect.length] = new Option("One", "1", false, false); // add new option
	//newSelect[newSelect.length] = new Option("Two", "2", false, false); // add new option
	for(var i=0; i < numViruses; i++){
			newSelect[newSelect.length] = new Option(virusName[i], i, false, false);
	}
		
	document.getElementById("bar").appendChild(newSelect); // myDiv is the container to hold the select list
	



//MCMC runs:

if (readDataType == 1) {
	var divTextMCMC = document.createElement('divTextMCMC');
	divTextMCMC.innerHTML = "Select a specific MCMC sample <br>";
	document.getElementById("MCMC").appendChild(divTextMCMC);
	
	var MCMC_select = document.createElement("select");
	MCMC_select.id = "MCMC select"; //add some attributes
	MCMC_select.size = 10;
	
	
	//	newSelect.onchange = somethingChanged;  // call the somethingChanged function when a change is made
	MCMC_select.onchange = MCMCselectPoint;
	//MCMC_select[newSelect.length] = new Option("One", "1", false, false); // add new option
	//newSelect[newSelect.length] = new Option("Two", "2", false, false); // add new option
	for (var i = 1; i < data.length; i++) {
		if (readDataType == 1) {
			MCMC_select[MCMC_select.length] = new Option("#" + data[i][0], i, false, false);
		}
	}
	
	
	document.getElementById("MCMC").appendChild(MCMC_select); // myDiv is the container to hold the select list
}




//alert(findMax(y_coord));

//alert(Math.max(x_coord));

  //var text4 = paper.text(100, 150, dot_x).attr({ 'font-size': 12, fill: '#000000', cursor: 'pointer' });
//var text5 = paper.text(100, 190, dot_y).attr({ 'font-size': 12, fill: '#000000', cursor: 'pointer' });

  //take the median by default
  //MCMC_median();


//    var dot = paper.circle(dx + 60 + R, dy + 10, radius).attr({stroke: "none", fill: "#000", opacity: 0});
//    var circle = paper.circle(dot_x,dot_y, 10).attr({ fill: '#3D6AA2', stroke: '#000000', 'stroke-width': 8 });

	
	

/*
    // Change the fill color of the squire and display an alert when someone clicks on the text object.
    text.click(function(){
        color = Raphael.getColor();
        square.attr({ fill: color });
    });	

	circle.click(function(){
		text.attr({text:dynamicText, x:280});
		var text2 = paper.text(320, 270, data[0][3]).attr({'font-size':25});
	});
*/

//alert(x_virus);
 
// alert("Procrustes analysis");
  
 //(scale)
 
 
   
}






 window.onload = function() {
 	
 	
 	var abc = [1, 2.2, 3, 4, 5, 6, 7, 8,9];
 	
 	//	addViruses(myData, 1);
	//addSera(mySera); //why is it not loaded after addViruses?
    var fileInput = document.getElementById('fileInput');
    var fileDisplayArea = document.getElementById('fileDisplayArea');
    fileInput.addEventListener('change', function(e) {
		
    // Put the rest of the demo code here.
 	var file = fileInput.files[0];
	//var textType = /text.*/;
	
//if (file.type.match(textType)) {
  var reader = new FileReader();
  reader.onload = function(e) {
	fileDisplayAreaLegend.innerText = "Showing the first 50000 characters of the virus coordinate file";
	var div = document.getElementById("fileDisplayArea");
	var input = document.createElement("textarea");
	//var button = document.createElement("button");
	input.name = "post";
	input.maxLength = "50000";
	input.cols = "50";
	input.rows = "5";
	input.value = reader.result;
	div.appendChild(input); //appendChild
	//div.appendChild(button);
	
//	addViruses(reader.result, 1);  //create the SVG, etc..
	addViruses(trimHeadAndBottom(reader.result), 1);  //create the SVG, etc..
	//addViruses(reader.result, 2);  //create the SVG, etc..
    //fileDisplayArea.innerText = reader.result;
	//	data = CSVToArray( reader.result , "\t");
	//alert("still ok");
  }

  reader.readAsText(file);  
//} else {
  //fileDisplayArea.innerText = "File not supported!";
//}	

	
	
   var svg = paper.toSVG();
   alert(svg);
	
	
		  
  });
	



	//serum fileInput
	var serum_fileInput = document.getElementById('serum_fileInput');
	serum_fileInput.addEventListener('change', function(e){
		var serum_file = serum_fileInput.files[0];
		//alert(serum_file);
		var serum_reader = new FileReader();
		serum_reader.onload = function(e){
			//var text2 = serum_reader.result;
			addSera(trimHeadAndBottom(serum_reader.result), 1);
		}
		serum_reader.readAsText(serum_file);
	});	



	//cluster color
	var cluster_fileInput = document.getElementById('cluster_fileInput');
	cluster_fileInput.addEventListener('change', function(e){
		var cluster_file = cluster_fileInput.files[0];
		var cluster_reader = new FileReader();
		cluster_reader.onload = function(e){
			add_cluster_color(cluster_reader.result);
		}
		cluster_reader.readAsText(cluster_file);
	});	


	//serum potency fileInput
	var serumPotency_fileInput = document.getElementById('serumPotency_fileInput');
	serumPotency_fileInput.addEventListener('change', function(e){
		var serumPotency_file = serumPotency_fileInput.files[0];
		var serumPotency_reader = new FileReader();
		serumPotency_reader.onload = function(e){
			readSerumPotency(trimHeadAndBottom(serumPotency_reader.result));
		}
		serumPotency_reader.readAsText(serumPotency_file);
	});	


	//virus avidity fileInput
	var virusAvidity_fileInput = document.getElementById('virusAvidity_fileInput');
	virusAvidity_fileInput.addEventListener('change', function(e){
		var virusAvidity_file = virusAvidity_fileInput.files[0];
		var virusAvidity_reader = new FileReader();
		virusAvidity_reader.onload = function(e){
			readVirusAvidity(trimHeadAndBottom(virusAvidity_reader.result));
		}
		virusAvidity_reader.readAsText(virusAvidity_file);
	});	



	//MDS log fileInput
	var mds_log_fileInput = document.getElementById('mds_log_fileInput');
	mds_log_fileInput.addEventListener('change', function(e){
		var mds_log_file = mds_log_fileInput.files[0];
		var mds_log_reader = new FileReader();
		mds_log_reader.onload = function(e){
			readMdsLog(trimHeadAndBottom(mds_log_reader.result));
		}
		mds_log_reader.readAsText(mds_log_file);
	});	


//mds_log_fileInput

	var ddCRP_log_fileInput = document.getElementById('ddCRP_log_fileInput');
	ddCRP_log_fileInput.addEventListener('change', function(e){
		var ddCRP_log_file = ddCRP_log_fileInput.files[0];
		var ddCRP_log_fileInput_reader = new FileReader();
		ddCRP_log_fileInput_reader.onload = function(e){
			read_ddCRP_log(trimHeadAndBottom(ddCRP_log_fileInput_reader.result));
		}
		ddCRP_log_fileInput_reader.readAsText(ddCRP_log_file);
	});	




//assignment fileinput

	var path_fileInput = document.getElementById('path_fileInput');
	path_fileInput.addEventListener('change', function(e){
		var path_file = path_fileInput.files[0];
		var path_fileInput_reader = new FileReader();
		path_fileInput_reader.onload = function(e){
			read_path(trimHeadAndBottom(path_fileInput_reader.result));
		}
		path_fileInput_reader.readAsText(path_file);
	});	
	
//mutation fileinput

	var mutations_fileInput = document.getElementById('mutations_fileInput');
	mutations_fileInput.addEventListener('change', function(e){
		var mutations_file = mutations_fileInput.files[0];
		var mutations_fileInput_reader = new FileReader();
		mutations_fileInput_reader.onload = function(e){
			read_mutations(trimHeadAndBottom(mutations_fileInput_reader.result));
		}
		mutations_fileInput_reader.readAsText(mutations_file);
	});		


//Create SVG Image
document.getElementById("createImage").onclick = function() {
	//alert("Saving a SVG image to a new window."); //I added
var canvas_=document.getElementById("drawing_board");
var text = (new XMLSerializer()).serializeToString(canvas_);
//alert(text);
	
	//perform trimming to get rid of the <div ...> </div ..>
var n = text.search(">");
//alert(n);
	
var n2 = text.lastIndexOf("<");
// alert(n2);	
 
 var imageText = text.substring(n+1,n2);
   
    var encodedText = encodeURIComponent(imageText);
   // var encodedText = encodeURIComponent(text);
   open("data:image/svg+xml," + encodedText);   //THis doesn't work in Internet explorer..
//maybe this is the solution:
//http://stackoverflow.com/questions/15981394/save-svgin-div-to-png-or-convert-to-png-raphael-js
//OK, here's the update: Simply use the getElementsByTagName document.getElementsByTagName('svg')[0].id = 'id_something'; and set the svg tag with id something, then using canvg(canvas, svg); and var img_url = canvas.toDataURL('image/png'); you will get the png file you wanted. Am I doing the right way? Thanks, �  Kristina Apr 13 '13 at 10:04
   
   
   //check this out: http://updates.html5rocks.com/2011/08/Saving-generated-files-on-the-client-side
   
   
      
//also see: http://stackoverflow.com/questions/2483919/how-to-save-svg-canvas-to-local-filesystem
	
	
	
//   var svg = paper.toSVG();
    //document.getElementById('bar').innerHTML = svg;
	
	/*
	//var elem = document.getElementById('drawing_board');
	//var imgData = elem.toDataURL("image/png");

	
	
    //Get the svg
    var svg = document.getElementById("drawing_board").innerHTML;

    //Create the canvas element
    var canvas = document.createElement('canvas');
    canvas.id = "canvas";
    document.body.appendChild(canvas);

    //Load the canvas element with our svg
    canvg(document.getElementById('canvas'), svg);


    //Save the svg to png
    Canvas2Image.saveAsPNG(canvas);
	
	//This uses
	//http://techoctave.com/c7/posts/130-save-raphael-svg-chart-as-image

    //Clear the canvas
    canvas.width = canvas.width;
    
    */
    
};


document.getElementById("IE").onclick = function(){

//Create SVG Image
var canvas_=document.getElementById("drawing_board");
var text = (new XMLSerializer()).serializeToString(canvas_);
var n = text.search(">");
var n2 = text.lastIndexOf("<");
  var imageText = text.substring(n+1,n2); //perform trimming to get rid of the <div ...> </div ..>	
	
// document.getElementById("svgText").innerHTML=imageText;

 //document.getElementById("svgText").innerHTML='<input type="text"  name="TextBox" value=imageText >';
 document.getElementById("tbox").value = imageText;
 //newdiv.innerHTML = '<input type="text"  name="TextBox'+num+'" value="TextBox'+num+'" >';  
//var box = document.createElement("input");
//box.type = "text"; 
 
}

	
}





